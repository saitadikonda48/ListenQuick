/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 35 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 73 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 76 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 103 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 106 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 109 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 112 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 115 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 118 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 121 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 124 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 127 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 130 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 133 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 136 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 139 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 142 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 171 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutput.cpp"


class sipPhonon_AudioOutput : public  ::Phonon::AudioOutput
{
public:
    sipPhonon_AudioOutput( ::Phonon::Category, ::QObject*);
    sipPhonon_AudioOutput( ::QObject*);
    ~sipPhonon_AudioOutput();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_AudioOutput(const sipPhonon_AudioOutput &);
    sipPhonon_AudioOutput &operator = (const sipPhonon_AudioOutput &);
};

sipPhonon_AudioOutput::sipPhonon_AudioOutput( ::Phonon::Category a0, ::QObject*a1):  ::Phonon::AudioOutput(a0,a1), sipPySelf(0)
{
}

sipPhonon_AudioOutput::sipPhonon_AudioOutput( ::QObject*a0):  ::Phonon::AudioOutput(a0), sipPySelf(0)
{
}

sipPhonon_AudioOutput::~sipPhonon_AudioOutput()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_AudioOutput::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_AudioOutput);
}

int sipPhonon_AudioOutput::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::Phonon::AudioOutput::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_AudioOutput,_c,_id,_a);

    return _id;
}

void *sipPhonon_AudioOutput::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast(sipPySelf, sipType_Phonon_AudioOutput, _clname)) ? this :  ::Phonon::AudioOutput::qt_metacast(_clname);
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_name, "name(self) -> str");

extern "C" {static PyObject *meth_Phonon_AudioOutput_name(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_name, doc_Phonon_AudioOutput_name);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_volume, "volume(self) -> float");

extern "C" {static PyObject *meth_Phonon_AudioOutput_volume(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_volume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->volume();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_volume, doc_Phonon_AudioOutput_volume);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_volumeDecibel, "volumeDecibel(self) -> float");

extern "C" {static PyObject *meth_Phonon_AudioOutput_volumeDecibel(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_volumeDecibel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->volumeDecibel();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_volumeDecibel, doc_Phonon_AudioOutput_volumeDecibel);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_category, "category(self) -> Phonon.Category");

extern "C" {static PyObject *meth_Phonon_AudioOutput_category(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_category(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp))
        {
             ::Phonon::Category sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->category();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_Category);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_category, doc_Phonon_AudioOutput_category);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_outputDevice, "outputDevice(self) -> Phonon.AudioOutputDevice");

extern "C" {static PyObject *meth_Phonon_AudioOutput_outputDevice(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_outputDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp))
        {
             ::Phonon::AudioOutputDevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Phonon::AudioOutputDevice(sipCpp->outputDevice());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_AudioOutputDevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_outputDevice, doc_Phonon_AudioOutput_outputDevice);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_isMuted, "isMuted(self) -> bool");

extern "C" {static PyObject *meth_Phonon_AudioOutput_isMuted(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_isMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isMuted();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_isMuted, doc_Phonon_AudioOutput_isMuted);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_setName, "setName(self, str)");

extern "C" {static PyObject *meth_Phonon_AudioOutput_setName(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setName(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_setName, doc_Phonon_AudioOutput_setName);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_setVolume, "setVolume(self, float)");

extern "C" {static PyObject *meth_Phonon_AudioOutput_setVolume(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_setVolume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVolume(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_setVolume, doc_Phonon_AudioOutput_setVolume);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_setVolumeDecibel, "setVolumeDecibel(self, float)");

extern "C" {static PyObject *meth_Phonon_AudioOutput_setVolumeDecibel(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_setVolumeDecibel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVolumeDecibel(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_setVolumeDecibel, doc_Phonon_AudioOutput_setVolumeDecibel);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_setOutputDevice, "setOutputDevice(self, Phonon.AudioOutputDevice) -> bool");

extern "C" {static PyObject *meth_Phonon_AudioOutput_setOutputDevice(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_setOutputDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutputDevice* a0;
         ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp, sipType_Phonon_AudioOutputDevice, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setOutputDevice(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_setOutputDevice, doc_Phonon_AudioOutput_setOutputDevice);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutput_setMuted, "setMuted(self, bool)");

extern "C" {static PyObject *meth_Phonon_AudioOutput_setMuted(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutput_setMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::Phonon::AudioOutput *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Phonon_AudioOutput, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMuted(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutput, sipName_setMuted, doc_Phonon_AudioOutput_setMuted);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_Phonon_AudioOutput(void *, const sipTypeDef *);}
static void *cast_Phonon_AudioOutput(void *sipCppV, const sipTypeDef *targetType)
{
     ::Phonon::AudioOutput *sipCpp = reinterpret_cast< ::Phonon::AudioOutput *>(sipCppV);

    if (targetType == sipType_Phonon_AbstractAudioOutput)
        return static_cast< ::Phonon::AbstractAudioOutput *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_Phonon_MediaNode)
        return static_cast< ::Phonon::MediaNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_AudioOutput(void *, int);}
static void release_Phonon_AudioOutput(void *sipCppV, int)
{
     ::Phonon::AudioOutput *sipCpp = reinterpret_cast< ::Phonon::AudioOutput *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_AudioOutput(sipSimpleWrapper *);}
static void dealloc_Phonon_AudioOutput(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipPhonon_AudioOutput *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_Phonon_AudioOutput(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_Phonon_AudioOutput(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_AudioOutput(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipPhonon_AudioOutput *sipCpp = 0;

    {
         ::Phonon::Category a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_Phonon_Category, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_AudioOutput(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_AudioOutput(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_AudioOutput[] = {{1, 255, 1}};


static PyMethodDef methods_Phonon_AudioOutput[] = {
    {SIP_MLNAME_CAST(sipName_category), meth_Phonon_AudioOutput_category, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_category)},
    {SIP_MLNAME_CAST(sipName_isMuted), meth_Phonon_AudioOutput_isMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_isMuted)},
    {SIP_MLNAME_CAST(sipName_name), meth_Phonon_AudioOutput_name, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_name)},
    {SIP_MLNAME_CAST(sipName_outputDevice), meth_Phonon_AudioOutput_outputDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_outputDevice)},
    {SIP_MLNAME_CAST(sipName_setMuted), meth_Phonon_AudioOutput_setMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_setMuted)},
    {SIP_MLNAME_CAST(sipName_setName), meth_Phonon_AudioOutput_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_setName)},
    {SIP_MLNAME_CAST(sipName_setOutputDevice), meth_Phonon_AudioOutput_setOutputDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_setOutputDevice)},
    {SIP_MLNAME_CAST(sipName_setVolume), meth_Phonon_AudioOutput_setVolume, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_setVolume)},
    {SIP_MLNAME_CAST(sipName_setVolumeDecibel), meth_Phonon_AudioOutput_setVolumeDecibel, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_setVolumeDecibel)},
    {SIP_MLNAME_CAST(sipName_volume), meth_Phonon_AudioOutput_volume, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_volume)},
    {SIP_MLNAME_CAST(sipName_volumeDecibel), meth_Phonon_AudioOutput_volumeDecibel, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutput_volumeDecibel)}
};

PyDoc_STRVAR(doc_Phonon_AudioOutput, "\1Phonon.AudioOutput(Phonon.Category, parent: QObject = None)\n"
    "Phonon.AudioOutput(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_Phonon_AudioOutput[] = {
    {"outputDeviceChanged(Phonon::AudioOutputDevice)", "\1outputDeviceChanged(self, Phonon.AudioOutputDevice)", 0, 0},
    {"mutedChanged(bool)", "\1mutedChanged(self, bool)", 0, 0},
    {"volumeChanged(qreal)", "\1volumeChanged(self, float)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_Phonon_AudioOutput = {
    & ::Phonon::AudioOutput::staticMetaObject,
    0,
    signals_Phonon_AudioOutput
};


sipClassTypeDef sipTypeDef_phonon_Phonon_AudioOutput = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__AudioOutput,
        {0},
        &plugin_Phonon_AudioOutput
    },
    {
        sipNameNr_AudioOutput,
        {0, 255, 0},
        11, methods_Phonon_AudioOutput,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_AudioOutput,
    -1,
    -1,
    supers_Phonon_AudioOutput,
    0,
    init_type_Phonon_AudioOutput,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_AudioOutput,
    0,
    0,
    0,
    release_Phonon_AudioOutput,
    cast_Phonon_AudioOutput,
    0,
    0,
    0,
    0,
    0,
    0
};
