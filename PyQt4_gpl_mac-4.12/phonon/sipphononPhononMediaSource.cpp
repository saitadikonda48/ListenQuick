/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 51 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaSource.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaSource.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 58 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaSource.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 95 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaSource.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 98 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaSource.cpp"


PyDoc_STRVAR(doc_Phonon_MediaSource_setAutoDelete, "setAutoDelete(self, bool)");

extern "C" {static PyObject *meth_Phonon_MediaSource_setAutoDelete(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaSource_setAutoDelete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::Phonon::MediaSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Phonon_MediaSource, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoDelete(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaSource, sipName_setAutoDelete, doc_Phonon_MediaSource_setAutoDelete);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaSource_autoDelete, "autoDelete(self) -> bool");

extern "C" {static PyObject *meth_Phonon_MediaSource_autoDelete(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaSource_autoDelete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaSource, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoDelete();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaSource, sipName_autoDelete, doc_Phonon_MediaSource_autoDelete);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaSource_type, "type(self) -> Phonon.MediaSource.Type");

extern "C" {static PyObject *meth_Phonon_MediaSource_type(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaSource_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaSource, &sipCpp))
        {
             ::Phonon::MediaSource::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_MediaSource_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaSource, sipName_type, doc_Phonon_MediaSource_type);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaSource_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_Phonon_MediaSource_fileName(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaSource_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaSource, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaSource, sipName_fileName, doc_Phonon_MediaSource_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaSource_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_Phonon_MediaSource_url(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaSource_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaSource, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaSource, sipName_url, doc_Phonon_MediaSource_url);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaSource_discType, "discType(self) -> Phonon.DiscType");

extern "C" {static PyObject *meth_Phonon_MediaSource_discType(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaSource_discType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaSource, &sipCpp))
        {
             ::Phonon::DiscType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->discType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_DiscType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaSource, sipName_discType, doc_Phonon_MediaSource_discType);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaSource_deviceName, "deviceName(self) -> str");

extern "C" {static PyObject *meth_Phonon_MediaSource_deviceName(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaSource_deviceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaSource, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->deviceName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaSource, sipName_deviceName, doc_Phonon_MediaSource_deviceName);

    return NULL;
}


extern "C" {static PyObject *slot_Phonon_MediaSource___ne__(PyObject *,PyObject *);}
static PyObject *slot_Phonon_MediaSource___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Phonon::MediaSource *sipCpp = reinterpret_cast< ::Phonon::MediaSource *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_MediaSource));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Phonon_MediaSource, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp-> ::Phonon::MediaSource::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon, ne_slot, sipType_Phonon_MediaSource, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Phonon_MediaSource___eq__(PyObject *,PyObject *);}
static PyObject *slot_Phonon_MediaSource___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Phonon::MediaSource *sipCpp = reinterpret_cast< ::Phonon::MediaSource *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_MediaSource));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Phonon_MediaSource, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::Phonon::MediaSource::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon, eq_slot, sipType_Phonon_MediaSource, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_MediaSource(void *, int);}
static void release_Phonon_MediaSource(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::Phonon::MediaSource *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_MediaSource(sipSimpleWrapper *);}
static void dealloc_Phonon_MediaSource(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Phonon_MediaSource(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Phonon_MediaSource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_MediaSource(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Phonon::MediaSource *sipCpp = 0;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::Phonon::MediaSource(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::Phonon::MediaSource(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
         ::Phonon::DiscType a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_deviceName,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|J1", sipType_Phonon_DiscType, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::Phonon::MediaSource(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::Phonon::MediaSource(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::Phonon::MediaSource* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Phonon_MediaSource, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::Phonon::MediaSource(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Phonon_MediaSource[] = {
    {(void *)slot_Phonon_MediaSource___ne__, ne_slot},
    {(void *)slot_Phonon_MediaSource___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Phonon_MediaSource[] = {
    {SIP_MLNAME_CAST(sipName_autoDelete), meth_Phonon_MediaSource_autoDelete, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaSource_autoDelete)},
    {SIP_MLNAME_CAST(sipName_deviceName), meth_Phonon_MediaSource_deviceName, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaSource_deviceName)},
    {SIP_MLNAME_CAST(sipName_discType), meth_Phonon_MediaSource_discType, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaSource_discType)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_Phonon_MediaSource_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaSource_fileName)},
    {SIP_MLNAME_CAST(sipName_setAutoDelete), meth_Phonon_MediaSource_setAutoDelete, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaSource_setAutoDelete)},
    {SIP_MLNAME_CAST(sipName_type), meth_Phonon_MediaSource_type, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaSource_type)},
    {SIP_MLNAME_CAST(sipName_url), meth_Phonon_MediaSource_url, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaSource_url)}
};

static sipEnumMemberDef enummembers_Phonon_MediaSource[] = {
    {sipName_Disc, static_cast<int>( ::Phonon::MediaSource::Disc), 26},
    {sipName_Empty, static_cast<int>( ::Phonon::MediaSource::Empty), 26},
    {sipName_Invalid, static_cast<int>( ::Phonon::MediaSource::Invalid), 26},
    {sipName_LocalFile, static_cast<int>( ::Phonon::MediaSource::LocalFile), 26},
    {sipName_Stream, static_cast<int>( ::Phonon::MediaSource::Stream), 26},
    {sipName_Url, static_cast<int>( ::Phonon::MediaSource::Url), 26},
};

PyDoc_STRVAR(doc_Phonon_MediaSource, "\1Phonon.MediaSource(str)\n"
    "Phonon.MediaSource(QUrl)\n"
    "Phonon.MediaSource(Phonon.DiscType, deviceName: str = '')\n"
    "Phonon.MediaSource(QIODevice)\n"
    "Phonon.MediaSource(Phonon.MediaSource)");


static pyqt4ClassPluginDef plugin_Phonon_MediaSource = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_phonon_Phonon_MediaSource = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Phonon__MediaSource,
        {0},
        &plugin_Phonon_MediaSource
    },
    {
        sipNameNr_MediaSource,
        {0, 255, 0},
        7, methods_Phonon_MediaSource,
        6, enummembers_Phonon_MediaSource,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_MediaSource,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_Phonon_MediaSource,
    init_type_Phonon_MediaSource,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_MediaSource,
    0,
    0,
    0,
    release_Phonon_MediaSource,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
