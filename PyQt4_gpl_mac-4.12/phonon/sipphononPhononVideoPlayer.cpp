/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 61 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 99 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 102 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 139 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 148 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 171 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 196 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 199 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 202 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 205 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 208 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 211 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 214 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 217 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 220 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 223 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 226 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 229 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 232 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 235 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 238 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 241 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 244 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 247 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 250 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 253 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 256 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 259 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 262 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 647 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 265 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 268 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 607 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 271 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 596 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 274 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 739 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 277 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 792 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 280 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 765 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 283 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 781 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 286 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 854 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 289 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 292 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 618 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 295 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 574 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 298 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 301 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 548 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 304 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 524 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 307 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 505 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 310 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 474 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 313 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 347 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 316 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 252 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 319 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 322 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 325 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 328 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 331 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 334 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 337 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 340 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 343 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 346 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 349 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 352 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 355 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 358 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 361 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 364 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 367 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 370 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 373 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 376 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 379 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoPlayer.cpp"


class sipPhonon_VideoPlayer : public  ::Phonon::VideoPlayer
{
public:
    sipPhonon_VideoPlayer( ::Phonon::Category, ::QWidget*);
    sipPhonon_VideoPlayer( ::QWidget*);
    virtual ~sipPhonon_VideoPlayer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const  ::QPalette&);
    void fontChange(const  ::QFont&);
    void windowActivationChange(bool);
    void languageChange();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_VideoPlayer(const sipPhonon_VideoPlayer &);
    sipPhonon_VideoPlayer &operator = (const sipPhonon_VideoPlayer &);

    char sipPyMethods[47];
};

sipPhonon_VideoPlayer::sipPhonon_VideoPlayer( ::Phonon::Category a0, ::QWidget*a1):  ::Phonon::VideoPlayer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_VideoPlayer::sipPhonon_VideoPlayer( ::QWidget*a0):  ::Phonon::VideoPlayer(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_VideoPlayer::~sipPhonon_VideoPlayer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_VideoPlayer::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_VideoPlayer);
}

int sipPhonon_VideoPlayer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::Phonon::VideoPlayer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_VideoPlayer,_c,_id,_a);

    return _id;
}

void *sipPhonon_VideoPlayer::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast(sipPySelf, sipType_Phonon_VideoPlayer, _clname)) ? this :  ::Phonon::VideoPlayer::qt_metacast(_clname);
}

void sipPhonon_VideoPlayer::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::disconnectNotify(a0);
        return;
    }

    extern void sipVH_phonon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_phonon_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::connectNotify(a0);
        return;
    }

    extern void sipVH_phonon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_phonon_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::customEvent(a0);
        return;
    }

    extern void sipVH_phonon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_phonon_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::childEvent(a0);
        return;
    }

    extern void sipVH_phonon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_phonon_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::timerEvent(a0);
        return;
    }

    extern void sipVH_phonon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_phonon_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_VideoPlayer::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::Phonon::VideoPlayer::eventFilter(a0,a1);

    extern bool sipVH_phonon_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_phonon_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipPhonon_VideoPlayer::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::Phonon::VideoPlayer::event(a0);

    extern bool sipVH_phonon_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_phonon_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipPhonon_VideoPlayer::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::Phonon::VideoPlayer::metric(a0);

    extern int sipVH_phonon_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_phonon_34(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipPhonon_VideoPlayer::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::Phonon::VideoPlayer::paintEngine();

    extern  ::QPaintEngine* sipVH_phonon_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_phonon_33(sipGILState, 0, sipPySelf, sipMeth);
}

int sipPhonon_VideoPlayer::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::Phonon::VideoPlayer::devType();

    extern int sipVH_phonon_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_phonon_32(sipGILState, 0, sipPySelf, sipMeth);
}

void sipPhonon_VideoPlayer::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::setVisible(a0);
        return;
    }

    extern void sipVH_phonon_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_phonon_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipPhonon_VideoPlayer::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::Phonon::VideoPlayer::sizeHint();

    extern  ::QSize sipVH_phonon_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_phonon_31(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipPhonon_VideoPlayer::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::Phonon::VideoPlayer::minimumSizeHint();

    extern  ::QSize sipVH_phonon_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_phonon_31(sipGILState, 0, sipPySelf, sipMeth);
}

int sipPhonon_VideoPlayer::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::Phonon::VideoPlayer::heightForWidth(a0);

    extern int sipVH_phonon_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_phonon_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::mousePressEvent(a0);
        return;
    }

    extern void sipVH_phonon_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_phonon_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_phonon_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_phonon_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_phonon_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_phonon_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_phonon_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_phonon_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::wheelEvent(a0);
        return;
    }

    extern void sipVH_phonon_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_phonon_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::keyPressEvent(a0);
        return;
    }

    extern void sipVH_phonon_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_phonon_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_phonon_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_phonon_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::focusInEvent(a0);
        return;
    }

    extern void sipVH_phonon_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_phonon_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::focusOutEvent(a0);
        return;
    }

    extern void sipVH_phonon_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_phonon_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::enterEvent(a0);
        return;
    }

    extern void sipVH_phonon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_phonon_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::leaveEvent(a0);
        return;
    }

    extern void sipVH_phonon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_phonon_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::paintEvent(a0);
        return;
    }

    extern void sipVH_phonon_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_phonon_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::moveEvent(a0);
        return;
    }

    extern void sipVH_phonon_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_phonon_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::resizeEvent(a0);
        return;
    }

    extern void sipVH_phonon_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_phonon_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::closeEvent(a0);
        return;
    }

    extern void sipVH_phonon_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_phonon_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_phonon_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_phonon_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::tabletEvent(a0);
        return;
    }

    extern void sipVH_phonon_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_phonon_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::actionEvent(a0);
        return;
    }

    extern void sipVH_phonon_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_phonon_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_phonon_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_phonon_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_phonon_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_phonon_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_phonon_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_phonon_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::dropEvent(a0);
        return;
    }

    extern void sipVH_phonon_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_phonon_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::showEvent(a0);
        return;
    }

    extern void sipVH_phonon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_phonon_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::hideEvent(a0);
        return;
    }

    extern void sipVH_phonon_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_phonon_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::changeEvent(a0);
        return;
    }

    extern void sipVH_phonon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_phonon_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_phonon_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_phonon_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipPhonon_VideoPlayer::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::Phonon::VideoPlayer::inputMethodQuery(a0);

    extern  ::QVariant sipVH_phonon_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_phonon_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_VideoPlayer::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::Phonon::VideoPlayer::focusNextPrevChild(a0);

    extern bool sipVH_phonon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_phonon_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::enabledChange(a0);
        return;
    }

    extern void sipVH_phonon_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_phonon_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::paletteChange(a0);
        return;
    }

    extern void sipVH_phonon_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_phonon_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::fontChange(a0);
        return;
    }

    extern void sipVH_phonon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_phonon_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::windowActivationChange(a0);
        return;
    }

    extern void sipVH_phonon_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_phonon_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoPlayer::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::Phonon::VideoPlayer::languageChange();
        return;
    }

    extern void sipVH_phonon_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_phonon_6(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_totalTime, "totalTime(self) -> int");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_totalTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_totalTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->totalTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_totalTime, doc_Phonon_VideoPlayer_totalTime);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_currentTime, "currentTime(self) -> int");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_currentTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_currentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_currentTime, doc_Phonon_VideoPlayer_currentTime);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_volume, "volume(self) -> float");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_volume(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_volume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->volume();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_volume, doc_Phonon_VideoPlayer_volume);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_isPlaying, "isPlaying(self) -> bool");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_isPlaying(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_isPlaying(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isPlaying();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_isPlaying, doc_Phonon_VideoPlayer_isPlaying);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_isPaused, "isPaused(self) -> bool");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_isPaused(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_isPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isPaused();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_isPaused, doc_Phonon_VideoPlayer_isPaused);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_load, "load(self, Phonon.MediaSource)");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_load(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource* a0;
         ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp, sipType_Phonon_MediaSource, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_load, doc_Phonon_VideoPlayer_load);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_play, "play(self, Phonon.MediaSource)\n"
    "play(self)");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_play(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_play(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource* a0;
         ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp, sipType_Phonon_MediaSource, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->play(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->play();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_play, doc_Phonon_VideoPlayer_play);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_pause, "pause(self)");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_pause(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->pause();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_pause, doc_Phonon_VideoPlayer_pause);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_stop, "stop(self)");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_stop(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_stop, doc_Phonon_VideoPlayer_stop);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_seek, "seek(self, int)");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_seek(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint64 a0;
         ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->seek(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_seek, doc_Phonon_VideoPlayer_seek);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_setVolume, "setVolume(self, float)");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_setVolume(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_setVolume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
         ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVolume(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_setVolume, doc_Phonon_VideoPlayer_setVolume);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_mediaObject, "mediaObject(self) -> Phonon.MediaObject");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_mediaObject(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_mediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
             ::Phonon::MediaObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mediaObject();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_MediaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_mediaObject, doc_Phonon_VideoPlayer_mediaObject);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_audioOutput, "audioOutput(self) -> Phonon.AudioOutput");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_audioOutput(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_audioOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
             ::Phonon::AudioOutput*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->audioOutput();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_AudioOutput,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_audioOutput, doc_Phonon_VideoPlayer_audioOutput);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoPlayer_videoWidget, "videoWidget(self) -> Phonon.VideoWidget");

extern "C" {static PyObject *meth_Phonon_VideoPlayer_videoWidget(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_videoWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoPlayer, &sipCpp))
        {
             ::Phonon::VideoWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->videoWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_VideoWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoPlayer, sipName_videoWidget, doc_Phonon_VideoPlayer_videoWidget);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_Phonon_VideoPlayer(void *, const sipTypeDef *);}
static void *cast_Phonon_VideoPlayer(void *sipCppV, const sipTypeDef *targetType)
{
     ::Phonon::VideoPlayer *sipCpp = reinterpret_cast< ::Phonon::VideoPlayer *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_VideoPlayer(void *, int);}
static void release_Phonon_VideoPlayer(void *sipCppV, int)
{
     ::Phonon::VideoPlayer *sipCpp = reinterpret_cast< ::Phonon::VideoPlayer *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_VideoPlayer(sipSimpleWrapper *);}
static void dealloc_Phonon_VideoPlayer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipPhonon_VideoPlayer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_Phonon_VideoPlayer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_Phonon_VideoPlayer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_VideoPlayer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipPhonon_VideoPlayer *sipCpp = 0;

    {
         ::Phonon::Category a0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_Phonon_Category, &a0, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_VideoPlayer(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_VideoPlayer(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_VideoPlayer[] = {{24, 1, 1}};


static PyMethodDef methods_Phonon_VideoPlayer[] = {
    {SIP_MLNAME_CAST(sipName_audioOutput), meth_Phonon_VideoPlayer_audioOutput, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_audioOutput)},
    {SIP_MLNAME_CAST(sipName_currentTime), meth_Phonon_VideoPlayer_currentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_currentTime)},
    {SIP_MLNAME_CAST(sipName_isPaused), meth_Phonon_VideoPlayer_isPaused, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_isPaused)},
    {SIP_MLNAME_CAST(sipName_isPlaying), meth_Phonon_VideoPlayer_isPlaying, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_isPlaying)},
    {SIP_MLNAME_CAST(sipName_load), meth_Phonon_VideoPlayer_load, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_load)},
    {SIP_MLNAME_CAST(sipName_mediaObject), meth_Phonon_VideoPlayer_mediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_mediaObject)},
    {SIP_MLNAME_CAST(sipName_pause), meth_Phonon_VideoPlayer_pause, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_pause)},
    {SIP_MLNAME_CAST(sipName_play), meth_Phonon_VideoPlayer_play, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_play)},
    {SIP_MLNAME_CAST(sipName_seek), meth_Phonon_VideoPlayer_seek, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_seek)},
    {SIP_MLNAME_CAST(sipName_setVolume), meth_Phonon_VideoPlayer_setVolume, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_setVolume)},
    {SIP_MLNAME_CAST(sipName_stop), meth_Phonon_VideoPlayer_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_stop)},
    {SIP_MLNAME_CAST(sipName_totalTime), meth_Phonon_VideoPlayer_totalTime, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_totalTime)},
    {SIP_MLNAME_CAST(sipName_videoWidget), meth_Phonon_VideoPlayer_videoWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_videoWidget)},
    {SIP_MLNAME_CAST(sipName_volume), meth_Phonon_VideoPlayer_volume, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoPlayer_volume)}
};

PyDoc_STRVAR(doc_Phonon_VideoPlayer, "\1Phonon.VideoPlayer(Phonon.Category, parent: QWidget = None)\n"
    "Phonon.VideoPlayer(parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_Phonon_VideoPlayer[] = {
    {"finished()", "\1finished(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_Phonon_VideoPlayer = {
    & ::Phonon::VideoPlayer::staticMetaObject,
    0,
    signals_Phonon_VideoPlayer
};


sipClassTypeDef sipTypeDef_phonon_Phonon_VideoPlayer = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__VideoPlayer,
        {0},
        &plugin_Phonon_VideoPlayer
    },
    {
        sipNameNr_VideoPlayer,
        {0, 255, 0},
        14, methods_Phonon_VideoPlayer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_VideoPlayer,
    -1,
    -1,
    supers_Phonon_VideoPlayer,
    0,
    init_type_Phonon_VideoPlayer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_VideoPlayer,
    0,
    0,
    0,
    release_Phonon_VideoPlayer,
    cast_Phonon_VideoPlayer,
    0,
    0,
    0,
    0,
    0,
    0
};
