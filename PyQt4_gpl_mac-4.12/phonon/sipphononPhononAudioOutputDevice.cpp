/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 53 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutputDevice.cpp"

#line 28 "sip/QtCore/qhash.sip"
#include <qhash.h>
#line 57 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutputDevice.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutputDevice.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutputDevice.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 66 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutputDevice.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutputDevice.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 72 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononAudioOutputDevice.cpp"


PyDoc_STRVAR(doc_Phonon_AudioOutputDevice_description, "description(self) -> str");

extern "C" {static PyObject *meth_Phonon_AudioOutputDevice_description(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDevice_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutputDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutputDevice, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->description());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutputDevice, sipName_description, doc_Phonon_AudioOutputDevice_description);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutputDevice_index, "index(self) -> int");

extern "C" {static PyObject *meth_Phonon_AudioOutputDevice_index(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDevice_index(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutputDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutputDevice, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->index();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutputDevice, sipName_index, doc_Phonon_AudioOutputDevice_index);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutputDevice_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_Phonon_AudioOutputDevice_isValid(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDevice_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutputDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutputDevice, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutputDevice, sipName_isValid, doc_Phonon_AudioOutputDevice_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutputDevice_name, "name(self) -> str");

extern "C" {static PyObject *meth_Phonon_AudioOutputDevice_name(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDevice_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutputDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutputDevice, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutputDevice, sipName_name, doc_Phonon_AudioOutputDevice_name);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutputDevice_property, "property(self, str) -> Any");

extern "C" {static PyObject *meth_Phonon_AudioOutputDevice_property(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDevice_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const  ::Phonon::AudioOutputDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_Phonon_AudioOutputDevice, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant(sipCpp->property(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutputDevice, sipName_property, doc_Phonon_AudioOutputDevice_property);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutputDevice_propertyNames, "propertyNames(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_Phonon_AudioOutputDevice_propertyNames(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDevice_propertyNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutputDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_AudioOutputDevice, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QByteArray>(sipCpp->propertyNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutputDevice, sipName_propertyNames, doc_Phonon_AudioOutputDevice_propertyNames);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_AudioOutputDevice_fromIndex, "fromIndex(int) -> Phonon.AudioOutputDevice");

extern "C" {static PyObject *meth_Phonon_AudioOutputDevice_fromIndex(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDevice_fromIndex(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::Phonon::AudioOutputDevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Phonon::AudioOutputDevice( ::Phonon::AudioOutputDevice::fromIndex(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_AudioOutputDevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AudioOutputDevice, sipName_fromIndex, doc_Phonon_AudioOutputDevice_fromIndex);

    return NULL;
}


extern "C" {static PyObject *slot_Phonon_AudioOutputDevice___eq__(PyObject *,PyObject *);}
static PyObject *slot_Phonon_AudioOutputDevice___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Phonon::AudioOutputDevice *sipCpp = reinterpret_cast< ::Phonon::AudioOutputDevice *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_AudioOutputDevice));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutputDevice* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Phonon_AudioOutputDevice, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::Phonon::AudioOutputDevice::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon, eq_slot, sipType_Phonon_AudioOutputDevice, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Phonon_AudioOutputDevice___ne__(PyObject *,PyObject *);}
static PyObject *slot_Phonon_AudioOutputDevice___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Phonon::AudioOutputDevice *sipCpp = reinterpret_cast< ::Phonon::AudioOutputDevice *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_AudioOutputDevice));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioOutputDevice* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Phonon_AudioOutputDevice, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::Phonon::AudioOutputDevice::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon, ne_slot, sipType_Phonon_AudioOutputDevice, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_AudioOutputDevice(void *, int);}
static void release_Phonon_AudioOutputDevice(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::Phonon::AudioOutputDevice *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_Phonon_AudioOutputDevice(void *, SIP_SSIZE_T, const void *);}
static void assign_Phonon_AudioOutputDevice(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::Phonon::AudioOutputDevice *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::Phonon::AudioOutputDevice *>(sipSrc);
}


extern "C" {static void *array_Phonon_AudioOutputDevice(SIP_SSIZE_T);}
static void *array_Phonon_AudioOutputDevice(SIP_SSIZE_T sipNrElem)
{
    return new  ::Phonon::AudioOutputDevice[sipNrElem];
}


extern "C" {static void *copy_Phonon_AudioOutputDevice(const void *, SIP_SSIZE_T);}
static void *copy_Phonon_AudioOutputDevice(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Phonon::AudioOutputDevice(reinterpret_cast<const  ::Phonon::AudioOutputDevice *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Phonon_AudioOutputDevice(sipSimpleWrapper *);}
static void dealloc_Phonon_AudioOutputDevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Phonon_AudioOutputDevice(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Phonon_AudioOutputDevice(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_AudioOutputDevice(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Phonon::AudioOutputDevice *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::Phonon::AudioOutputDevice();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;
        const QHash< ::QByteArray, ::QVariant>* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iJ1", &a0, sipType_QHash_0100QByteArray_0100QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::Phonon::AudioOutputDevice(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHash< ::QByteArray, ::QVariant> *>(a1),sipType_QHash_0100QByteArray_0100QVariant,a1State);

            return sipCpp;
        }
    }

    {
        const  ::Phonon::AudioOutputDevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Phonon_AudioOutputDevice, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::Phonon::AudioOutputDevice(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Phonon_AudioOutputDevice[] = {
    {(void *)slot_Phonon_AudioOutputDevice___eq__, eq_slot},
    {(void *)slot_Phonon_AudioOutputDevice___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Phonon_AudioOutputDevice[] = {
    {SIP_MLNAME_CAST(sipName_description), meth_Phonon_AudioOutputDevice_description, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutputDevice_description)},
    {SIP_MLNAME_CAST(sipName_fromIndex), meth_Phonon_AudioOutputDevice_fromIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutputDevice_fromIndex)},
    {SIP_MLNAME_CAST(sipName_index), meth_Phonon_AudioOutputDevice_index, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutputDevice_index)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_Phonon_AudioOutputDevice_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutputDevice_isValid)},
    {SIP_MLNAME_CAST(sipName_name), meth_Phonon_AudioOutputDevice_name, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutputDevice_name)},
    {SIP_MLNAME_CAST(sipName_property), meth_Phonon_AudioOutputDevice_property, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutputDevice_property)},
    {SIP_MLNAME_CAST(sipName_propertyNames), meth_Phonon_AudioOutputDevice_propertyNames, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_AudioOutputDevice_propertyNames)}
};

PyDoc_STRVAR(doc_Phonon_AudioOutputDevice, "\1Phonon.AudioOutputDevice()\n"
    "Phonon.AudioOutputDevice(int, object)\n"
    "Phonon.AudioOutputDevice(Phonon.AudioOutputDevice)");


static pyqt4ClassPluginDef plugin_Phonon_AudioOutputDevice = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_phonon_Phonon_AudioOutputDevice = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Phonon__AudioOutputDevice,
        {0},
        &plugin_Phonon_AudioOutputDevice
    },
    {
        sipNameNr_AudioOutputDevice,
        {0, 255, 0},
        7, methods_Phonon_AudioOutputDevice,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_AudioOutputDevice,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_Phonon_AudioOutputDevice,
    init_type_Phonon_AudioOutputDevice,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_AudioOutputDevice,
    assign_Phonon_AudioOutputDevice,
    array_Phonon_AudioOutputDevice,
    copy_Phonon_AudioOutputDevice,
    release_Phonon_AudioOutputDevice,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
