/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 45 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 69 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 96 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 123 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 126 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 129 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 148 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 151 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 154 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 157 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 160 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 163 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 166 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 169 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 172 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 175 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 178 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 181 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 184 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 187 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaController.cpp"


class sipPhonon_MediaController : public  ::Phonon::MediaController
{
public:
    sipPhonon_MediaController( ::Phonon::MediaObject*);
    virtual ~sipPhonon_MediaController();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_MediaController(const sipPhonon_MediaController &);
    sipPhonon_MediaController &operator = (const sipPhonon_MediaController &);

    char sipPyMethods[7];
};

sipPhonon_MediaController::sipPhonon_MediaController( ::Phonon::MediaObject*a0):  ::Phonon::MediaController(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_MediaController::~sipPhonon_MediaController()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_MediaController::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_MediaController);
}

int sipPhonon_MediaController::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::Phonon::MediaController::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_MediaController,_c,_id,_a);

    return _id;
}

void *sipPhonon_MediaController::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast(sipPySelf, sipType_Phonon_MediaController, _clname)) ? this :  ::Phonon::MediaController::qt_metacast(_clname);
}

bool sipPhonon_MediaController::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::Phonon::MediaController::event(a0);

    extern bool sipVH_phonon_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_phonon_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_MediaController::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::Phonon::MediaController::eventFilter(a0,a1);

    extern bool sipVH_phonon_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_phonon_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipPhonon_MediaController::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::Phonon::MediaController::timerEvent(a0);
        return;
    }

    extern void sipVH_phonon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_phonon_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_MediaController::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::Phonon::MediaController::childEvent(a0);
        return;
    }

    extern void sipVH_phonon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_phonon_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_MediaController::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::Phonon::MediaController::customEvent(a0);
        return;
    }

    extern void sipVH_phonon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_phonon_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_MediaController::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::Phonon::MediaController::connectNotify(a0);
        return;
    }

    extern void sipVH_phonon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_phonon_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_MediaController::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::Phonon::MediaController::disconnectNotify(a0);
        return;
    }

    extern void sipVH_phonon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_phonon_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_Phonon_MediaController_supportedFeatures, "supportedFeatures(self) -> Phonon.MediaController.Features");

extern "C" {static PyObject *meth_Phonon_MediaController_supportedFeatures(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_supportedFeatures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
             ::Phonon::MediaController::Features*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Phonon::MediaController::Features(sipCpp->supportedFeatures());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_MediaController_Features,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_supportedFeatures, doc_Phonon_MediaController_supportedFeatures);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_availableAngles, "availableAngles(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_availableAngles(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_availableAngles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->availableAngles();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_availableAngles, doc_Phonon_MediaController_availableAngles);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_currentAngle, "currentAngle(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_currentAngle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_currentAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentAngle();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_currentAngle, doc_Phonon_MediaController_currentAngle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_availableChapters, "availableChapters(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_availableChapters(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_availableChapters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->availableChapters();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_availableChapters, doc_Phonon_MediaController_availableChapters);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_currentChapter, "currentChapter(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_currentChapter(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_currentChapter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentChapter();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_currentChapter, doc_Phonon_MediaController_currentChapter);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_availableTitles, "availableTitles(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_availableTitles(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_availableTitles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->availableTitles();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_availableTitles, doc_Phonon_MediaController_availableTitles);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_currentTitle, "currentTitle(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaController_currentTitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_currentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentTitle();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_currentTitle, doc_Phonon_MediaController_currentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_autoplayTitles, "autoplayTitles(self) -> bool");

extern "C" {static PyObject *meth_Phonon_MediaController_autoplayTitles(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_autoplayTitles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoplayTitles();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_autoplayTitles, doc_Phonon_MediaController_autoplayTitles);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setCurrentAngle, "setCurrentAngle(self, int)");

extern "C" {static PyObject *meth_Phonon_MediaController_setCurrentAngle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setCurrentAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Phonon_MediaController, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentAngle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setCurrentAngle, doc_Phonon_MediaController_setCurrentAngle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setCurrentChapter, "setCurrentChapter(self, int)");

extern "C" {static PyObject *meth_Phonon_MediaController_setCurrentChapter(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setCurrentChapter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Phonon_MediaController, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentChapter(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setCurrentChapter, doc_Phonon_MediaController_setCurrentChapter);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setCurrentTitle, "setCurrentTitle(self, int)");

extern "C" {static PyObject *meth_Phonon_MediaController_setCurrentTitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setCurrentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Phonon_MediaController, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentTitle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setCurrentTitle, doc_Phonon_MediaController_setCurrentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setAutoplayTitles, "setAutoplayTitles(self, bool)");

extern "C" {static PyObject *meth_Phonon_MediaController_setAutoplayTitles(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setAutoplayTitles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Phonon_MediaController, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoplayTitles(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setAutoplayTitles, doc_Phonon_MediaController_setAutoplayTitles);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_nextTitle, "nextTitle(self)");

extern "C" {static PyObject *meth_Phonon_MediaController_nextTitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_nextTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->nextTitle();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_nextTitle, doc_Phonon_MediaController_nextTitle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_previousTitle, "previousTitle(self)");

extern "C" {static PyObject *meth_Phonon_MediaController_previousTitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_previousTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->previousTitle();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_previousTitle, doc_Phonon_MediaController_previousTitle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_currentAudioChannel, "currentAudioChannel(self) -> Phonon.AudioChannelDescription");

extern "C" {static PyObject *meth_Phonon_MediaController_currentAudioChannel(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_currentAudioChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
             ::Phonon::AudioChannelDescription*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Phonon::AudioChannelDescription(sipCpp->currentAudioChannel());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_AudioChannelDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_currentAudioChannel, doc_Phonon_MediaController_currentAudioChannel);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_currentSubtitle, "currentSubtitle(self) -> Phonon.SubtitleDescription");

extern "C" {static PyObject *meth_Phonon_MediaController_currentSubtitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_currentSubtitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
             ::Phonon::SubtitleDescription*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Phonon::SubtitleDescription(sipCpp->currentSubtitle());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_SubtitleDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_currentSubtitle, doc_Phonon_MediaController_currentSubtitle);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_availableAudioChannels, "availableAudioChannels(self) -> object");

extern "C" {static PyObject *meth_Phonon_MediaController_availableAudioChannels(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_availableAudioChannels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            QList< ::Phonon::AudioChannelDescription>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::Phonon::AudioChannelDescription>(sipCpp->availableAudioChannels());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100Phonon_AudioChannelDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_availableAudioChannels, doc_Phonon_MediaController_availableAudioChannels);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_availableSubtitles, "availableSubtitles(self) -> object");

extern "C" {static PyObject *meth_Phonon_MediaController_availableSubtitles(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_availableSubtitles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaController, &sipCpp))
        {
            QList< ::Phonon::SubtitleDescription>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::Phonon::SubtitleDescription>(sipCpp->availableSubtitles());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100Phonon_SubtitleDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_availableSubtitles, doc_Phonon_MediaController_availableSubtitles);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setCurrentAudioChannel, "setCurrentAudioChannel(self, Phonon.AudioChannelDescription)");

extern "C" {static PyObject *meth_Phonon_MediaController_setCurrentAudioChannel(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setCurrentAudioChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::AudioChannelDescription* a0;
         ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_MediaController, &sipCpp, sipType_Phonon_AudioChannelDescription, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentAudioChannel(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setCurrentAudioChannel, doc_Phonon_MediaController_setCurrentAudioChannel);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaController_setCurrentSubtitle, "setCurrentSubtitle(self, Phonon.SubtitleDescription)");

extern "C" {static PyObject *meth_Phonon_MediaController_setCurrentSubtitle(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaController_setCurrentSubtitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::SubtitleDescription* a0;
         ::Phonon::MediaController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_MediaController, &sipCpp, sipType_Phonon_SubtitleDescription, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentSubtitle(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaController, sipName_setCurrentSubtitle, doc_Phonon_MediaController_setCurrentSubtitle);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_Phonon_MediaController(void *, const sipTypeDef *);}
static void *cast_Phonon_MediaController(void *sipCppV, const sipTypeDef *targetType)
{
     ::Phonon::MediaController *sipCpp = reinterpret_cast< ::Phonon::MediaController *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_MediaController(void *, int);}
static void release_Phonon_MediaController(void *sipCppV, int)
{
     ::Phonon::MediaController *sipCpp = reinterpret_cast< ::Phonon::MediaController *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_MediaController(sipSimpleWrapper *);}
static void dealloc_Phonon_MediaController(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipPhonon_MediaController *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_Phonon_MediaController(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_Phonon_MediaController(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_MediaController(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipPhonon_MediaController *sipCpp = 0;

    {
         ::Phonon::MediaObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_Phonon_MediaObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_MediaController(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_MediaController[] = {{14, 0, 1}};


static PyMethodDef methods_Phonon_MediaController[] = {
    {SIP_MLNAME_CAST(sipName_autoplayTitles), meth_Phonon_MediaController_autoplayTitles, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_autoplayTitles)},
    {SIP_MLNAME_CAST(sipName_availableAngles), meth_Phonon_MediaController_availableAngles, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_availableAngles)},
    {SIP_MLNAME_CAST(sipName_availableAudioChannels), meth_Phonon_MediaController_availableAudioChannels, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_availableAudioChannels)},
    {SIP_MLNAME_CAST(sipName_availableChapters), meth_Phonon_MediaController_availableChapters, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_availableChapters)},
    {SIP_MLNAME_CAST(sipName_availableSubtitles), meth_Phonon_MediaController_availableSubtitles, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_availableSubtitles)},
    {SIP_MLNAME_CAST(sipName_availableTitles), meth_Phonon_MediaController_availableTitles, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_availableTitles)},
    {SIP_MLNAME_CAST(sipName_currentAngle), meth_Phonon_MediaController_currentAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_currentAngle)},
    {SIP_MLNAME_CAST(sipName_currentAudioChannel), meth_Phonon_MediaController_currentAudioChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_currentAudioChannel)},
    {SIP_MLNAME_CAST(sipName_currentChapter), meth_Phonon_MediaController_currentChapter, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_currentChapter)},
    {SIP_MLNAME_CAST(sipName_currentSubtitle), meth_Phonon_MediaController_currentSubtitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_currentSubtitle)},
    {SIP_MLNAME_CAST(sipName_currentTitle), meth_Phonon_MediaController_currentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_currentTitle)},
    {SIP_MLNAME_CAST(sipName_nextTitle), meth_Phonon_MediaController_nextTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_nextTitle)},
    {SIP_MLNAME_CAST(sipName_previousTitle), meth_Phonon_MediaController_previousTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_previousTitle)},
    {SIP_MLNAME_CAST(sipName_setAutoplayTitles), meth_Phonon_MediaController_setAutoplayTitles, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setAutoplayTitles)},
    {SIP_MLNAME_CAST(sipName_setCurrentAngle), meth_Phonon_MediaController_setCurrentAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setCurrentAngle)},
    {SIP_MLNAME_CAST(sipName_setCurrentAudioChannel), meth_Phonon_MediaController_setCurrentAudioChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setCurrentAudioChannel)},
    {SIP_MLNAME_CAST(sipName_setCurrentChapter), meth_Phonon_MediaController_setCurrentChapter, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setCurrentChapter)},
    {SIP_MLNAME_CAST(sipName_setCurrentSubtitle), meth_Phonon_MediaController_setCurrentSubtitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setCurrentSubtitle)},
    {SIP_MLNAME_CAST(sipName_setCurrentTitle), meth_Phonon_MediaController_setCurrentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_setCurrentTitle)},
    {SIP_MLNAME_CAST(sipName_supportedFeatures), meth_Phonon_MediaController_supportedFeatures, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaController_supportedFeatures)}
};

static sipEnumMemberDef enummembers_Phonon_MediaController[] = {
    {sipName_Angles, static_cast<int>( ::Phonon::MediaController::Angles), 21},
    {sipName_Chapters, static_cast<int>( ::Phonon::MediaController::Chapters), 21},
    {sipName_Titles, static_cast<int>( ::Phonon::MediaController::Titles), 21},
};

PyDoc_STRVAR(doc_Phonon_MediaController, "\1Phonon.MediaController(Phonon.MediaObject)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_Phonon_MediaController[] = {
    {"availableAudioChannelsChanged()", "\1availableAudioChannelsChanged(self)", 0, 0},
    {"availableSubtitlesChanged()", "\1availableSubtitlesChanged(self)", 0, 0},
    {"titleChanged(int)", "\1titleChanged(self, int)", 0, 0},
    {"availableTitlesChanged(int)", "\1availableTitlesChanged(self, int)", 0, 0},
    {"chapterChanged(int)", "\1chapterChanged(self, int)", 0, 0},
    {"availableChaptersChanged(int)", "\1availableChaptersChanged(self, int)", 0, 0},
    {"angleChanged(int)", "\1angleChanged(self, int)", 0, 0},
    {"availableAnglesChanged(int)", "\1availableAnglesChanged(self, int)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_Phonon_MediaController = {
    & ::Phonon::MediaController::staticMetaObject,
    0,
    signals_Phonon_MediaController
};


sipClassTypeDef sipTypeDef_phonon_Phonon_MediaController = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__MediaController,
        {0},
        &plugin_Phonon_MediaController
    },
    {
        sipNameNr_MediaController,
        {0, 255, 0},
        20, methods_Phonon_MediaController,
        3, enummembers_Phonon_MediaController,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_MediaController,
    -1,
    -1,
    supers_Phonon_MediaController,
    0,
    init_type_Phonon_MediaController,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_MediaController,
    0,
    0,
    0,
    release_Phonon_MediaController,
    cast_Phonon_MediaController,
    0,
    0,
    0,
    0,
    0,
    0
};
