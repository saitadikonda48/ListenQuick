/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 63 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"

#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 67 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 70 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 252 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 76 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 82 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 28 "sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 91 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 28 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 94 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 97 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 100 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 103 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 106 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 109 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 112 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 115 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 118 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 121 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 124 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 127 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 130 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 133 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 136 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 139 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 142 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 647 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 145 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 607 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 148 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 596 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 151 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 739 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 154 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 792 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 157 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 765 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 160 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 781 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 163 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 854 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 166 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 169 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 618 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 172 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 574 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 175 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 178 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 548 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 181 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 524 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 184 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 505 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 187 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 474 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 190 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 347 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 193 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 28 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 196 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 199 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 202 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 205 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 208 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 211 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 214 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 217 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 220 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 223 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 226 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 229 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 232 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 235 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 238 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 241 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 244 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 247 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 250 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 253 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 256 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 285 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononVideoWidget.cpp"


class sipPhonon_VideoWidget : public  ::Phonon::VideoWidget
{
public:
    sipPhonon_VideoWidget( ::QWidget*);
    virtual ~sipPhonon_VideoWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const  ::QPalette&);
    void fontChange(const  ::QFont&);
    void windowActivationChange(bool);
    void languageChange();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_VideoWidget(const sipPhonon_VideoWidget &);
    sipPhonon_VideoWidget &operator = (const sipPhonon_VideoWidget &);

    char sipPyMethods[47];
};

sipPhonon_VideoWidget::sipPhonon_VideoWidget( ::QWidget*a0):  ::Phonon::VideoWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_VideoWidget::~sipPhonon_VideoWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_VideoWidget::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_VideoWidget);
}

int sipPhonon_VideoWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::Phonon::VideoWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_VideoWidget,_c,_id,_a);

    return _id;
}

void *sipPhonon_VideoWidget::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast(sipPySelf, sipType_Phonon_VideoWidget, _clname)) ? this :  ::Phonon::VideoWidget::qt_metacast(_clname);
}

void sipPhonon_VideoWidget::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::disconnectNotify(a0);
        return;
    }

    extern void sipVH_phonon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_phonon_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::connectNotify(a0);
        return;
    }

    extern void sipVH_phonon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_phonon_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::customEvent(a0);
        return;
    }

    extern void sipVH_phonon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_phonon_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::childEvent(a0);
        return;
    }

    extern void sipVH_phonon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_phonon_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::timerEvent(a0);
        return;
    }

    extern void sipVH_phonon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_phonon_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_VideoWidget::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::Phonon::VideoWidget::eventFilter(a0,a1);

    extern bool sipVH_phonon_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_phonon_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipPhonon_VideoWidget::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::Phonon::VideoWidget::event(a0);

    extern bool sipVH_phonon_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_phonon_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipPhonon_VideoWidget::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::Phonon::VideoWidget::metric(a0);

    extern int sipVH_phonon_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_phonon_34(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipPhonon_VideoWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::Phonon::VideoWidget::paintEngine();

    extern  ::QPaintEngine* sipVH_phonon_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_phonon_33(sipGILState, 0, sipPySelf, sipMeth);
}

int sipPhonon_VideoWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::Phonon::VideoWidget::devType();

    extern int sipVH_phonon_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_phonon_32(sipGILState, 0, sipPySelf, sipMeth);
}

void sipPhonon_VideoWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::setVisible(a0);
        return;
    }

    extern void sipVH_phonon_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_phonon_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipPhonon_VideoWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::Phonon::VideoWidget::sizeHint();

    extern  ::QSize sipVH_phonon_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_phonon_31(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipPhonon_VideoWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::Phonon::VideoWidget::minimumSizeHint();

    extern  ::QSize sipVH_phonon_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_phonon_31(sipGILState, 0, sipPySelf, sipMeth);
}

int sipPhonon_VideoWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::Phonon::VideoWidget::heightForWidth(a0);

    extern int sipVH_phonon_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_phonon_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_phonon_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_phonon_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_phonon_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_phonon_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_phonon_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_phonon_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_phonon_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_phonon_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_phonon_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_phonon_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::keyPressEvent(a0);
        return;
    }

    extern void sipVH_phonon_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_phonon_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_phonon_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_phonon_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_phonon_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_phonon_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_phonon_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_phonon_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::enterEvent(a0);
        return;
    }

    extern void sipVH_phonon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_phonon_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::leaveEvent(a0);
        return;
    }

    extern void sipVH_phonon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_phonon_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_phonon_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_phonon_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_phonon_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_phonon_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_phonon_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_phonon_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_phonon_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_phonon_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_phonon_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_phonon_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_phonon_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_phonon_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_phonon_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_phonon_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_phonon_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_phonon_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_phonon_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_phonon_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_phonon_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_phonon_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_phonon_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_phonon_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::showEvent(a0);
        return;
    }

    extern void sipVH_phonon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_phonon_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_phonon_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_phonon_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::changeEvent(a0);
        return;
    }

    extern void sipVH_phonon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_phonon_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_phonon_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_phonon_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipPhonon_VideoWidget::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::Phonon::VideoWidget::inputMethodQuery(a0);

    extern  ::QVariant sipVH_phonon_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_phonon_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_VideoWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::Phonon::VideoWidget::focusNextPrevChild(a0);

    extern bool sipVH_phonon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_phonon_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_phonon_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_phonon_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_phonon_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_phonon_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::fontChange(a0);
        return;
    }

    extern void sipVH_phonon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_phonon_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_phonon_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_phonon_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_VideoWidget::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::Phonon::VideoWidget::languageChange();
        return;
    }

    extern void sipVH_phonon_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_phonon_6(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_aspectRatio, "aspectRatio(self) -> Phonon.VideoWidget.AspectRatio");

extern "C" {static PyObject *meth_Phonon_VideoWidget_aspectRatio(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_aspectRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
             ::Phonon::VideoWidget::AspectRatio sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->aspectRatio();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_VideoWidget_AspectRatio);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_aspectRatio, doc_Phonon_VideoWidget_aspectRatio);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_scaleMode, "scaleMode(self) -> Phonon.VideoWidget.ScaleMode");

extern "C" {static PyObject *meth_Phonon_VideoWidget_scaleMode(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_scaleMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
             ::Phonon::VideoWidget::ScaleMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scaleMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_VideoWidget_ScaleMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_scaleMode, doc_Phonon_VideoWidget_scaleMode);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_brightness, "brightness(self) -> float");

extern "C" {static PyObject *meth_Phonon_VideoWidget_brightness(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_brightness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->brightness();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_brightness, doc_Phonon_VideoWidget_brightness);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_contrast, "contrast(self) -> float");

extern "C" {static PyObject *meth_Phonon_VideoWidget_contrast(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_contrast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contrast();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_contrast, doc_Phonon_VideoWidget_contrast);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_hue, "hue(self) -> float");

extern "C" {static PyObject *meth_Phonon_VideoWidget_hue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_hue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hue();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_hue, doc_Phonon_VideoWidget_hue);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_saturation, "saturation(self) -> float");

extern "C" {static PyObject *meth_Phonon_VideoWidget_saturation(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_saturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->saturation();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_saturation, doc_Phonon_VideoWidget_saturation);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setFullScreen, "setFullScreen(self, bool)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setFullScreen(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFullScreen(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setFullScreen, doc_Phonon_VideoWidget_setFullScreen);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_exitFullScreen, "exitFullScreen(self)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_exitFullScreen(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_exitFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->exitFullScreen();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_exitFullScreen, doc_Phonon_VideoWidget_exitFullScreen);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_enterFullScreen, "enterFullScreen(self)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_enterFullScreen(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_enterFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->enterFullScreen();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_enterFullScreen, doc_Phonon_VideoWidget_enterFullScreen);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setAspectRatio, "setAspectRatio(self, Phonon.VideoWidget.AspectRatio)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setAspectRatio(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setAspectRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::VideoWidget::AspectRatio a0;
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, sipType_Phonon_VideoWidget_AspectRatio, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAspectRatio(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setAspectRatio, doc_Phonon_VideoWidget_setAspectRatio);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setScaleMode, "setScaleMode(self, Phonon.VideoWidget.ScaleMode)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setScaleMode(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setScaleMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::VideoWidget::ScaleMode a0;
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, sipType_Phonon_VideoWidget_ScaleMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScaleMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setScaleMode, doc_Phonon_VideoWidget_setScaleMode);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setBrightness, "setBrightness(self, float)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setBrightness(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setBrightness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBrightness(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setBrightness, doc_Phonon_VideoWidget_setBrightness);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setContrast, "setContrast(self, float)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setContrast(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setContrast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContrast(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setContrast, doc_Phonon_VideoWidget_setContrast);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setHue, "setHue(self, float)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setHue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setHue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHue(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setHue, doc_Phonon_VideoWidget_setHue);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_setSaturation, "setSaturation(self, float)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_setSaturation(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_setSaturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSaturation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_setSaturation, doc_Phonon_VideoWidget_setSaturation);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_Phonon_VideoWidget_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::Phonon::VideoWidget::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_mouseMoveEvent, doc_Phonon_VideoWidget_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_Phonon_VideoWidget_event(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::Phonon::VideoWidget::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_event, doc_Phonon_VideoWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_VideoWidget_snapshot, "snapshot(self) -> QImage");

extern "C" {static PyObject *meth_Phonon_VideoWidget_snapshot(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoWidget_snapshot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::VideoWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_VideoWidget, &sipCpp))
        {
             ::QImage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QImage(sipCpp->snapshot());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VideoWidget, sipName_snapshot, doc_Phonon_VideoWidget_snapshot);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_Phonon_VideoWidget(void *, const sipTypeDef *);}
static void *cast_Phonon_VideoWidget(void *sipCppV, const sipTypeDef *targetType)
{
     ::Phonon::VideoWidget *sipCpp = reinterpret_cast< ::Phonon::VideoWidget *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    if (targetType == sipType_Phonon_AbstractVideoOutput)
        return static_cast< ::Phonon::AbstractVideoOutput *>(sipCpp);

    if (targetType == sipType_Phonon_MediaNode)
        return static_cast< ::Phonon::MediaNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_VideoWidget(void *, int);}
static void release_Phonon_VideoWidget(void *sipCppV, int)
{
     ::Phonon::VideoWidget *sipCpp = reinterpret_cast< ::Phonon::VideoWidget *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_VideoWidget(sipSimpleWrapper *);}
static void dealloc_Phonon_VideoWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipPhonon_VideoWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_Phonon_VideoWidget(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_Phonon_VideoWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_VideoWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipPhonon_VideoWidget *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_VideoWidget(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_VideoWidget[] = {{24, 1, 0}, {2, 255, 1}};


static PyMethodDef methods_Phonon_VideoWidget[] = {
    {SIP_MLNAME_CAST(sipName_aspectRatio), meth_Phonon_VideoWidget_aspectRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_aspectRatio)},
    {SIP_MLNAME_CAST(sipName_brightness), meth_Phonon_VideoWidget_brightness, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_brightness)},
    {SIP_MLNAME_CAST(sipName_contrast), meth_Phonon_VideoWidget_contrast, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_contrast)},
    {SIP_MLNAME_CAST(sipName_enterFullScreen), meth_Phonon_VideoWidget_enterFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_enterFullScreen)},
    {SIP_MLNAME_CAST(sipName_event), meth_Phonon_VideoWidget_event, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_event)},
    {SIP_MLNAME_CAST(sipName_exitFullScreen), meth_Phonon_VideoWidget_exitFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_exitFullScreen)},
    {SIP_MLNAME_CAST(sipName_hue), meth_Phonon_VideoWidget_hue, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_hue)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_Phonon_VideoWidget_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_saturation), meth_Phonon_VideoWidget_saturation, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_saturation)},
    {SIP_MLNAME_CAST(sipName_scaleMode), meth_Phonon_VideoWidget_scaleMode, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_scaleMode)},
    {SIP_MLNAME_CAST(sipName_setAspectRatio), meth_Phonon_VideoWidget_setAspectRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setAspectRatio)},
    {SIP_MLNAME_CAST(sipName_setBrightness), meth_Phonon_VideoWidget_setBrightness, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setBrightness)},
    {SIP_MLNAME_CAST(sipName_setContrast), meth_Phonon_VideoWidget_setContrast, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setContrast)},
    {SIP_MLNAME_CAST(sipName_setFullScreen), meth_Phonon_VideoWidget_setFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setFullScreen)},
    {SIP_MLNAME_CAST(sipName_setHue), meth_Phonon_VideoWidget_setHue, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setHue)},
    {SIP_MLNAME_CAST(sipName_setSaturation), meth_Phonon_VideoWidget_setSaturation, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setSaturation)},
    {SIP_MLNAME_CAST(sipName_setScaleMode), meth_Phonon_VideoWidget_setScaleMode, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_setScaleMode)},
    {SIP_MLNAME_CAST(sipName_snapshot), meth_Phonon_VideoWidget_snapshot, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_VideoWidget_snapshot)}
};

static sipEnumMemberDef enummembers_Phonon_VideoWidget[] = {
    {sipName_AspectRatio16_9, static_cast<int>( ::Phonon::VideoWidget::AspectRatio16_9), 34},
    {sipName_AspectRatio4_3, static_cast<int>( ::Phonon::VideoWidget::AspectRatio4_3), 34},
    {sipName_AspectRatioAuto, static_cast<int>( ::Phonon::VideoWidget::AspectRatioAuto), 34},
    {sipName_AspectRatioWidget, static_cast<int>( ::Phonon::VideoWidget::AspectRatioWidget), 34},
    {sipName_FitInView, static_cast<int>( ::Phonon::VideoWidget::FitInView), 35},
    {sipName_ScaleAndCrop, static_cast<int>( ::Phonon::VideoWidget::ScaleAndCrop), 35},
};

PyDoc_STRVAR(doc_Phonon_VideoWidget, "\1Phonon.VideoWidget(parent: QWidget = None)");


static pyqt4ClassPluginDef plugin_Phonon_VideoWidget = {
    & ::Phonon::VideoWidget::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_phonon_Phonon_VideoWidget = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__VideoWidget,
        {0},
        &plugin_Phonon_VideoWidget
    },
    {
        sipNameNr_VideoWidget,
        {0, 255, 0},
        18, methods_Phonon_VideoWidget,
        6, enummembers_Phonon_VideoWidget,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_VideoWidget,
    -1,
    -1,
    supers_Phonon_VideoWidget,
    0,
    init_type_Phonon_VideoWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_VideoWidget,
    0,
    0,
    0,
    release_Phonon_VideoWidget,
    cast_Phonon_VideoWidget,
    0,
    0,
    0,
    0,
    0,
    0
};
