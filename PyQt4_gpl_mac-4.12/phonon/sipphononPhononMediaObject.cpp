/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 49 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 53 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 78 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 115 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 118 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 121 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 124 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 127 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 130 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 236 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 133 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 68 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 136 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 139 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 142 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 145 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 148 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 151 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 154 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 157 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 160 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 163 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 166 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 169 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 172 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 201 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononMediaObject.cpp"


class sipPhonon_MediaObject : public  ::Phonon::MediaObject
{
public:
    sipPhonon_MediaObject( ::QObject*);
    virtual ~sipPhonon_MediaObject();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_MediaObject(const sipPhonon_MediaObject &);
    sipPhonon_MediaObject &operator = (const sipPhonon_MediaObject &);

    char sipPyMethods[7];
};

sipPhonon_MediaObject::sipPhonon_MediaObject( ::QObject*a0):  ::Phonon::MediaObject(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_MediaObject::~sipPhonon_MediaObject()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_MediaObject::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_MediaObject);
}

int sipPhonon_MediaObject::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::Phonon::MediaObject::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_MediaObject,_c,_id,_a);

    return _id;
}

void *sipPhonon_MediaObject::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast(sipPySelf, sipType_Phonon_MediaObject, _clname)) ? this :  ::Phonon::MediaObject::qt_metacast(_clname);
}

bool sipPhonon_MediaObject::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::Phonon::MediaObject::event(a0);

    extern bool sipVH_phonon_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_phonon_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_MediaObject::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::Phonon::MediaObject::eventFilter(a0,a1);

    extern bool sipVH_phonon_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_phonon_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipPhonon_MediaObject::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::Phonon::MediaObject::timerEvent(a0);
        return;
    }

    extern void sipVH_phonon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_phonon_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_MediaObject::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::Phonon::MediaObject::childEvent(a0);
        return;
    }

    extern void sipVH_phonon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_phonon_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_MediaObject::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::Phonon::MediaObject::customEvent(a0);
        return;
    }

    extern void sipVH_phonon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_phonon_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_MediaObject::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::Phonon::MediaObject::connectNotify(a0);
        return;
    }

    extern void sipVH_phonon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_phonon_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_MediaObject::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::Phonon::MediaObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_phonon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_phonon_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_Phonon_MediaObject_state, "state(self) -> Phonon.State");

extern "C" {static PyObject *meth_Phonon_MediaObject_state(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
             ::Phonon::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_state, doc_Phonon_MediaObject_state);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_hasVideo, "hasVideo(self) -> bool");

extern "C" {static PyObject *meth_Phonon_MediaObject_hasVideo(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_hasVideo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasVideo();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_hasVideo, doc_Phonon_MediaObject_hasVideo);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_isSeekable, "isSeekable(self) -> bool");

extern "C" {static PyObject *meth_Phonon_MediaObject_isSeekable(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_isSeekable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSeekable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_isSeekable, doc_Phonon_MediaObject_isSeekable);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_tickInterval, "tickInterval(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaObject_tickInterval(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_tickInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
             ::qint32 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tickInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_tickInterval, doc_Phonon_MediaObject_tickInterval);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_metaData, "metaData(self, str) -> List[str]\n"
    "metaData(self, Phonon.MetaData) -> List[str]\n"
    "metaData(self) -> object");

extern "C" {static PyObject *meth_Phonon_MediaObject_metaData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->metaData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
         ::Phonon::MetaData a0;
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, sipType_Phonon_MetaData, &a0))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->metaData(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
            QMultiMap< ::QString, ::QString>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMultiMap< ::QString, ::QString>(sipCpp->metaData());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMultiMap_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_metaData, doc_Phonon_MediaObject_metaData);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_Phonon_MediaObject_errorString(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_errorString, doc_Phonon_MediaObject_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_errorType, "errorType(self) -> Phonon.ErrorType");

extern "C" {static PyObject *meth_Phonon_MediaObject_errorType(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_errorType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
             ::Phonon::ErrorType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->errorType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_ErrorType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_errorType, doc_Phonon_MediaObject_errorType);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_currentSource, "currentSource(self) -> Phonon.MediaSource");

extern "C" {static PyObject *meth_Phonon_MediaObject_currentSource(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_currentSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
             ::Phonon::MediaSource*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Phonon::MediaSource(sipCpp->currentSource());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_MediaSource,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_currentSource, doc_Phonon_MediaObject_currentSource);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_setCurrentSource, "setCurrentSource(self, Phonon.MediaSource)");

extern "C" {static PyObject *meth_Phonon_MediaObject_setCurrentSource(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_setCurrentSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource* a0;
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, sipType_Phonon_MediaSource, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentSource(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_setCurrentSource, doc_Phonon_MediaObject_setCurrentSource);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_queue, "queue(self) -> object");

extern "C" {static PyObject *meth_Phonon_MediaObject_queue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_queue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
            QList< ::Phonon::MediaSource>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::Phonon::MediaSource>(sipCpp->queue());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100Phonon_MediaSource,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_queue, doc_Phonon_MediaObject_queue);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_setQueue, "setQueue(self, Sequence[Phonon.MediaSource])\n"
    "setQueue(self, Sequence[QUrl])");

extern "C" {static PyObject *meth_Phonon_MediaObject_setQueue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_setQueue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList< ::Phonon::MediaSource>* a0;
        int a0State = 0;
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, sipType_QList_0100Phonon_MediaSource,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQueue(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::Phonon::MediaSource> *>(a0),sipType_QList_0100Phonon_MediaSource,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList< ::QUrl>* a0;
        int a0State = 0;
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, sipType_QList_0100QUrl,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQueue(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_setQueue, doc_Phonon_MediaObject_setQueue);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_enqueue, "enqueue(self, Phonon.MediaSource)\n"
    "enqueue(self, Sequence[Phonon.MediaSource])\n"
    "enqueue(self, Sequence[QUrl])");

extern "C" {static PyObject *meth_Phonon_MediaObject_enqueue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_enqueue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaSource* a0;
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, sipType_Phonon_MediaSource, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->enqueue(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList< ::Phonon::MediaSource>* a0;
        int a0State = 0;
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, sipType_QList_0100Phonon_MediaSource,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->enqueue(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::Phonon::MediaSource> *>(a0),sipType_QList_0100Phonon_MediaSource,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList< ::QUrl>* a0;
        int a0State = 0;
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, sipType_QList_0100QUrl,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->enqueue(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_enqueue, doc_Phonon_MediaObject_enqueue);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_clearQueue, "clearQueue(self)");

extern "C" {static PyObject *meth_Phonon_MediaObject_clearQueue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_clearQueue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearQueue();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_clearQueue, doc_Phonon_MediaObject_clearQueue);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_currentTime, "currentTime(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaObject_currentTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_currentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_currentTime, doc_Phonon_MediaObject_currentTime);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_totalTime, "totalTime(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaObject_totalTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_totalTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->totalTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_totalTime, doc_Phonon_MediaObject_totalTime);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_remainingTime, "remainingTime(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaObject_remainingTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_remainingTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remainingTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_remainingTime, doc_Phonon_MediaObject_remainingTime);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_prefinishMark, "prefinishMark(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaObject_prefinishMark(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_prefinishMark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
             ::qint32 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->prefinishMark();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_prefinishMark, doc_Phonon_MediaObject_prefinishMark);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_setPrefinishMark, "setPrefinishMark(self, int)");

extern "C" {static PyObject *meth_Phonon_MediaObject_setPrefinishMark(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_setPrefinishMark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint32 a0;
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrefinishMark(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_setPrefinishMark, doc_Phonon_MediaObject_setPrefinishMark);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_transitionTime, "transitionTime(self) -> int");

extern "C" {static PyObject *meth_Phonon_MediaObject_transitionTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_transitionTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
             ::qint32 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->transitionTime();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_transitionTime, doc_Phonon_MediaObject_transitionTime);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_setTransitionTime, "setTransitionTime(self, int)");

extern "C" {static PyObject *meth_Phonon_MediaObject_setTransitionTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_setTransitionTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint32 a0;
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTransitionTime(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_setTransitionTime, doc_Phonon_MediaObject_setTransitionTime);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_setTickInterval, "setTickInterval(self, int)");

extern "C" {static PyObject *meth_Phonon_MediaObject_setTickInterval(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_setTickInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint32 a0;
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTickInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_setTickInterval, doc_Phonon_MediaObject_setTickInterval);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_play, "play(self)");

extern "C" {static PyObject *meth_Phonon_MediaObject_play(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_play(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->play();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_play, doc_Phonon_MediaObject_play);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_pause, "pause(self)");

extern "C" {static PyObject *meth_Phonon_MediaObject_pause(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->pause();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_pause, doc_Phonon_MediaObject_pause);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_stop, "stop(self)");

extern "C" {static PyObject *meth_Phonon_MediaObject_stop(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_stop, doc_Phonon_MediaObject_stop);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_seek, "seek(self, int)");

extern "C" {static PyObject *meth_Phonon_MediaObject_seek(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint64 a0;
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_Phonon_MediaObject, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->seek(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_seek, doc_Phonon_MediaObject_seek);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_MediaObject_clear, "clear(self)");

extern "C" {static PyObject *meth_Phonon_MediaObject_clear(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_MediaObject, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MediaObject, sipName_clear, doc_Phonon_MediaObject_clear);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_Phonon_MediaObject(void *, const sipTypeDef *);}
static void *cast_Phonon_MediaObject(void *sipCppV, const sipTypeDef *targetType)
{
     ::Phonon::MediaObject *sipCpp = reinterpret_cast< ::Phonon::MediaObject *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_Phonon_MediaNode)
        return static_cast< ::Phonon::MediaNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_MediaObject(void *, int);}
static void release_Phonon_MediaObject(void *sipCppV, int)
{
     ::Phonon::MediaObject *sipCpp = reinterpret_cast< ::Phonon::MediaObject *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_MediaObject(sipSimpleWrapper *);}
static void dealloc_Phonon_MediaObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipPhonon_MediaObject *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_Phonon_MediaObject(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_Phonon_MediaObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_MediaObject(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipPhonon_MediaObject *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_MediaObject(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_MediaObject[] = {{14, 0, 0}, {23, 255, 1}};


static PyMethodDef methods_Phonon_MediaObject[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_Phonon_MediaObject_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_clear)},
    {SIP_MLNAME_CAST(sipName_clearQueue), meth_Phonon_MediaObject_clearQueue, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_clearQueue)},
    {SIP_MLNAME_CAST(sipName_currentSource), meth_Phonon_MediaObject_currentSource, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_currentSource)},
    {SIP_MLNAME_CAST(sipName_currentTime), meth_Phonon_MediaObject_currentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_currentTime)},
    {SIP_MLNAME_CAST(sipName_enqueue), meth_Phonon_MediaObject_enqueue, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_enqueue)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_Phonon_MediaObject_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_errorString)},
    {SIP_MLNAME_CAST(sipName_errorType), meth_Phonon_MediaObject_errorType, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_errorType)},
    {SIP_MLNAME_CAST(sipName_hasVideo), meth_Phonon_MediaObject_hasVideo, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_hasVideo)},
    {SIP_MLNAME_CAST(sipName_isSeekable), meth_Phonon_MediaObject_isSeekable, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_isSeekable)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_Phonon_MediaObject_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_metaData)},
    {SIP_MLNAME_CAST(sipName_pause), meth_Phonon_MediaObject_pause, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_pause)},
    {SIP_MLNAME_CAST(sipName_play), meth_Phonon_MediaObject_play, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_play)},
    {SIP_MLNAME_CAST(sipName_prefinishMark), meth_Phonon_MediaObject_prefinishMark, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_prefinishMark)},
    {SIP_MLNAME_CAST(sipName_queue), meth_Phonon_MediaObject_queue, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_queue)},
    {SIP_MLNAME_CAST(sipName_remainingTime), meth_Phonon_MediaObject_remainingTime, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_remainingTime)},
    {SIP_MLNAME_CAST(sipName_seek), meth_Phonon_MediaObject_seek, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_seek)},
    {SIP_MLNAME_CAST(sipName_setCurrentSource), meth_Phonon_MediaObject_setCurrentSource, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_setCurrentSource)},
    {SIP_MLNAME_CAST(sipName_setPrefinishMark), meth_Phonon_MediaObject_setPrefinishMark, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_setPrefinishMark)},
    {SIP_MLNAME_CAST(sipName_setQueue), meth_Phonon_MediaObject_setQueue, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_setQueue)},
    {SIP_MLNAME_CAST(sipName_setTickInterval), meth_Phonon_MediaObject_setTickInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_setTickInterval)},
    {SIP_MLNAME_CAST(sipName_setTransitionTime), meth_Phonon_MediaObject_setTransitionTime, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_setTransitionTime)},
    {SIP_MLNAME_CAST(sipName_state), meth_Phonon_MediaObject_state, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_Phonon_MediaObject_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_stop)},
    {SIP_MLNAME_CAST(sipName_tickInterval), meth_Phonon_MediaObject_tickInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_tickInterval)},
    {SIP_MLNAME_CAST(sipName_totalTime), meth_Phonon_MediaObject_totalTime, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_totalTime)},
    {SIP_MLNAME_CAST(sipName_transitionTime), meth_Phonon_MediaObject_transitionTime, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_MediaObject_transitionTime)}
};

PyDoc_STRVAR(doc_Phonon_MediaObject, "\1Phonon.MediaObject(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_Phonon_MediaObject[] = {
    {"totalTimeChanged(qint64)", "\1totalTimeChanged(self, int)", 0, 0},
    {"prefinishMarkReached(qint32)", "\1prefinishMarkReached(self, int)", 0, 0},
    {"aboutToFinish()", "\1aboutToFinish(self)", 0, 0},
    {"currentSourceChanged(Phonon::MediaSource)", "\1currentSourceChanged(self, Phonon.MediaSource)", 0, 0},
    {"finished()", "\1finished(self)", 0, 0},
    {"bufferStatus(int)", "\1bufferStatus(self, int)", 0, 0},
    {"hasVideoChanged(bool)", "\1hasVideoChanged(self, bool)", 0, 0},
    {"seekableChanged(bool)", "\1seekableChanged(self, bool)", 0, 0},
    {"metaDataChanged()", "\1metaDataChanged(self)", 0, 0},
    {"tick(qint64)", "\1tick(self, int)", 0, 0},
    {"stateChanged(Phonon::State,Phonon::State)", "\1stateChanged(self, Phonon.State, Phonon.State)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_Phonon_MediaObject = {
    & ::Phonon::MediaObject::staticMetaObject,
    0,
    signals_Phonon_MediaObject
};


sipClassTypeDef sipTypeDef_phonon_Phonon_MediaObject = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__MediaObject,
        {0},
        &plugin_Phonon_MediaObject
    },
    {
        sipNameNr_MediaObject,
        {0, 255, 0},
        26, methods_Phonon_MediaObject,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_MediaObject,
    -1,
    -1,
    supers_Phonon_MediaObject,
    0,
    init_type_Phonon_MediaObject,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_MediaObject,
    0,
    0,
    0,
    release_Phonon_MediaObject,
    cast_Phonon_MediaObject,
    0,
    0,
    0,
    0,
    0,
    0
};
