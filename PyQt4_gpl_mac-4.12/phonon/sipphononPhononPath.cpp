/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/path.sip"
#include <path.h>
#line 55 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononPath.cpp"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 77 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononPath.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononPath.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 34 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 93 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononPath.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effect.sip"
#include <effect.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 120 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/phonon/sipphononPhononPath.cpp"


PyDoc_STRVAR(doc_Phonon_Path_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_Phonon_Path_isValid(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Path, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_isValid, doc_Phonon_Path_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_insertEffect, "insertEffect(self, Phonon.EffectDescription, before: Phonon.Effect = None) -> Phonon.Effect\n"
    "insertEffect(self, Phonon.Effect, before: Phonon.Effect = None) -> bool");

extern "C" {static PyObject *meth_Phonon_Path_insertEffect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_insertEffect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::EffectDescription* a0;
         ::Phonon::Effect* a1 = 0;
         ::Phonon::Path *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_before,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_Phonon_Path, &sipCpp, sipType_Phonon_EffectDescription, &a0, sipType_Phonon_Effect, &a1))
        {
             ::Phonon::Effect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertEffect(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_Effect,NULL);
        }
    }

    {
         ::Phonon::Effect* a0;
         ::Phonon::Effect* a1 = 0;
         ::Phonon::Path *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_before,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J8", &sipSelf, sipType_Phonon_Path, &sipCpp, sipType_Phonon_Effect, &a0, sipType_Phonon_Effect, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertEffect(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_insertEffect, doc_Phonon_Path_insertEffect);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_removeEffect, "removeEffect(self, Phonon.Effect) -> bool");

extern "C" {static PyObject *meth_Phonon_Path_removeEffect(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_removeEffect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::Effect* a0;
         ::Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_Phonon_Path, &sipCpp, sipType_Phonon_Effect, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->removeEffect(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_removeEffect, doc_Phonon_Path_removeEffect);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_effects, "effects(self) -> object");

extern "C" {static PyObject *meth_Phonon_Path_effects(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_effects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Path, &sipCpp))
        {
            QList< ::Phonon::Effect*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::Phonon::Effect*>(sipCpp->effects());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101Phonon_Effect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_effects, doc_Phonon_Path_effects);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_reconnect, "reconnect(self, Phonon.MediaNode, Phonon.MediaNode) -> bool");

extern "C" {static PyObject *meth_Phonon_Path_reconnect(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_reconnect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::MediaNode* a0;
         ::Phonon::MediaNode* a1;
         ::Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_Phonon_Path, &sipCpp, sipType_Phonon_MediaNode, &a0, sipType_Phonon_MediaNode, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->reconnect(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_reconnect, doc_Phonon_Path_reconnect);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_disconnect, "disconnect(self) -> bool");

extern "C" {static PyObject *meth_Phonon_Path_disconnect(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_disconnect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Path, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->disconnect();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_disconnect, doc_Phonon_Path_disconnect);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_source, "source(self) -> Phonon.MediaNode");

extern "C" {static PyObject *meth_Phonon_Path_source(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Path, &sipCpp))
        {
             ::Phonon::MediaNode*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->source();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_MediaNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_source, doc_Phonon_Path_source);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Path_sink, "sink(self) -> Phonon.MediaNode");

extern "C" {static PyObject *meth_Phonon_Path_sink(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Path_sink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::Path *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Path, &sipCpp))
        {
             ::Phonon::MediaNode*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sink();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_MediaNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Path, sipName_sink, doc_Phonon_Path_sink);

    return NULL;
}


extern "C" {static PyObject *slot_Phonon_Path___ne__(PyObject *,PyObject *);}
static PyObject *slot_Phonon_Path___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Phonon::Path *sipCpp = reinterpret_cast< ::Phonon::Path *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_Path));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::Path* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Phonon_Path, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::Phonon::Path::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon, ne_slot, sipType_Phonon_Path, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Phonon_Path___eq__(PyObject *,PyObject *);}
static PyObject *slot_Phonon_Path___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Phonon::Path *sipCpp = reinterpret_cast< ::Phonon::Path *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Phonon_Path));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::Phonon::Path* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Phonon_Path, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::Phonon::Path::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_phonon, eq_slot, sipType_Phonon_Path, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_Path(void *, int);}
static void release_Phonon_Path(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::Phonon::Path *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_Phonon_Path(void *, SIP_SSIZE_T, const void *);}
static void assign_Phonon_Path(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::Phonon::Path *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::Phonon::Path *>(sipSrc);
}


extern "C" {static void *array_Phonon_Path(SIP_SSIZE_T);}
static void *array_Phonon_Path(SIP_SSIZE_T sipNrElem)
{
    return new  ::Phonon::Path[sipNrElem];
}


extern "C" {static void *copy_Phonon_Path(const void *, SIP_SSIZE_T);}
static void *copy_Phonon_Path(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Phonon::Path(reinterpret_cast<const  ::Phonon::Path *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Phonon_Path(sipSimpleWrapper *);}
static void dealloc_Phonon_Path(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Phonon_Path(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Phonon_Path(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_Path(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Phonon::Path *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::Phonon::Path();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::Phonon::Path* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Phonon_Path, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::Phonon::Path(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Phonon_Path[] = {
    {(void *)slot_Phonon_Path___ne__, ne_slot},
    {(void *)slot_Phonon_Path___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Phonon_Path[] = {
    {SIP_MLNAME_CAST(sipName_disconnect), meth_Phonon_Path_disconnect, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_disconnect)},
    {SIP_MLNAME_CAST(sipName_effects), meth_Phonon_Path_effects, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_effects)},
    {SIP_MLNAME_CAST(sipName_insertEffect), (PyCFunction)meth_Phonon_Path_insertEffect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Phonon_Path_insertEffect)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_Phonon_Path_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_isValid)},
    {SIP_MLNAME_CAST(sipName_reconnect), meth_Phonon_Path_reconnect, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_reconnect)},
    {SIP_MLNAME_CAST(sipName_removeEffect), meth_Phonon_Path_removeEffect, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_removeEffect)},
    {SIP_MLNAME_CAST(sipName_sink), meth_Phonon_Path_sink, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_sink)},
    {SIP_MLNAME_CAST(sipName_source), meth_Phonon_Path_source, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Path_source)}
};

PyDoc_STRVAR(doc_Phonon_Path, "\1Phonon.Path()\n"
    "Phonon.Path(Phonon.Path)");


static pyqt4ClassPluginDef plugin_Phonon_Path = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_phonon_Phonon_Path = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Phonon__Path,
        {0},
        &plugin_Phonon_Path
    },
    {
        sipNameNr_Path,
        {0, 255, 0},
        8, methods_Phonon_Path,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_Path,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_Phonon_Path,
    init_type_Phonon_Path,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_Path,
    assign_Phonon_Path,
    array_Phonon_Path,
    copy_Phonon_Path,
    release_Phonon_Path,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
