/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 29 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 68 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebframe.sip"
#include <qwebframe.h>
#line 36 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebsecurityorigin.sip"
#include <qwebsecurityorigin.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 48 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 451 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 53 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 56 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 59 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 62 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 65 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 68 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 71 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 74 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 229 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 79 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 236 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 84 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 618 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 90 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 93 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 96 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 102 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 105 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 108 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 111 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 61 "sip/QtGui/qundostack.sip"
#include <qundostack.h>
#line 114 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 117 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 120 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 56 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 123 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 126 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 129 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 132 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 135 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 138 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 141 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 144 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 147 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPage.cpp"


class sipQWebPage : public  ::QWebPage
{
public:
    sipQWebPage( ::QObject*);
    virtual ~sipQWebPage();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QString userAgentForUrl(const  ::QUrl&) const;
    void javaScriptConsoleMessage(const  ::QString&,int,const  ::QString&);
    bool javaScriptPrompt( ::QWebFrame*,const  ::QString&,const  ::QString&, ::QString*);
    bool javaScriptConfirm( ::QWebFrame*,const  ::QString&);
    void javaScriptAlert( ::QWebFrame*,const  ::QString&);
     ::QString chooseFile( ::QWebFrame*,const  ::QString&);
    bool acceptNavigationRequest( ::QWebFrame*,const  ::QNetworkRequest&, ::QWebPage::NavigationType);
     ::QObject* createPlugin(const  ::QString&,const  ::QUrl&,const  ::QStringList&,const  ::QStringList&);
     ::QWebPage* createWindow( ::QWebPage::WebWindowType);
    bool supportsExtension( ::QWebPage::Extension) const;
    bool extension( ::QWebPage::Extension,const  ::QWebPage::ExtensionOption*, ::QWebPage::ExtensionReturn*);
    void triggerAction( ::QWebPage::WebAction,bool);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebPage(const sipQWebPage &);
    sipQWebPage &operator = (const sipQWebPage &);

    char sipPyMethods[20];
};

sipQWebPage::sipQWebPage( ::QObject*a0):  ::QWebPage(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebPage::~sipQWebPage()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebPage::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QWebPage);
}

int sipQWebPage::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QWebPage::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QWebPage,_c,_id,_a);

    return _id;
}

void *sipQWebPage::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast(sipPySelf, sipType_QWebPage, _clname)) ? this :  ::QWebPage::qt_metacast(_clname);
}

 ::QString sipQWebPage::userAgentForUrl(const  ::QUrl& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_userAgentForUrl);

    if (!sipMeth)
        return  ::QWebPage::userAgentForUrl(a0);

    extern  ::QString sipVH_QtWebKit_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtWebKit_71(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPage::javaScriptConsoleMessage(const  ::QString& a0,int a1,const  ::QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_javaScriptConsoleMessage);

    if (!sipMeth)
    {
         ::QWebPage::javaScriptConsoleMessage(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWebKit_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,int,const  ::QString&);

    sipVH_QtWebKit_70(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQWebPage::javaScriptPrompt( ::QWebFrame*a0,const  ::QString& a1,const  ::QString& a2, ::QString*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_javaScriptPrompt);

    if (!sipMeth)
        return  ::QWebPage::javaScriptPrompt(a0,a1,a2,a3);

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        extern bool sipVH_QtWebKit_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebFrame*,const  ::QString&,const  ::QString&, ::QString*);

        return sipVH_QtWebKit_69(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
    }

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        extern bool sipVH_QtWebKit_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebFrame*,const  ::QString&,const  ::QString&, ::QString*);

        return sipVH_QtWebKit_68(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
    }

    return  ::QWebPage::javaScriptPrompt(a0,a1,a2,a3);
}

bool sipQWebPage::javaScriptConfirm( ::QWebFrame*a0,const  ::QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_javaScriptConfirm);

    if (!sipMeth)
        return  ::QWebPage::javaScriptConfirm(a0,a1);

    extern bool sipVH_QtWebKit_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebFrame*,const  ::QString&);

    return sipVH_QtWebKit_67(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQWebPage::javaScriptAlert( ::QWebFrame*a0,const  ::QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_javaScriptAlert);

    if (!sipMeth)
    {
         ::QWebPage::javaScriptAlert(a0,a1);
        return;
    }

    extern void sipVH_QtWebKit_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebFrame*,const  ::QString&);

    sipVH_QtWebKit_66(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::QString sipQWebPage::chooseFile( ::QWebFrame*a0,const  ::QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_chooseFile);

    if (!sipMeth)
        return  ::QWebPage::chooseFile(a0,a1);

    extern  ::QString sipVH_QtWebKit_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebFrame*,const  ::QString&);

    return sipVH_QtWebKit_65(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQWebPage::acceptNavigationRequest( ::QWebFrame*a0,const  ::QNetworkRequest& a1, ::QWebPage::NavigationType a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_acceptNavigationRequest);

    if (!sipMeth)
        return  ::QWebPage::acceptNavigationRequest(a0,a1,a2);

    extern bool sipVH_QtWebKit_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebFrame*,const  ::QNetworkRequest&, ::QWebPage::NavigationType);

    return sipVH_QtWebKit_64(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QObject* sipQWebPage::createPlugin(const  ::QString& a0,const  ::QUrl& a1,const  ::QStringList& a2,const  ::QStringList& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_createPlugin);

    if (!sipMeth)
        return  ::QWebPage::createPlugin(a0,a1,a2,a3);

    extern  ::QObject* sipVH_QtWebKit_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QUrl&,const  ::QStringList&,const  ::QStringList&);

    return sipVH_QtWebKit_63(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QWebPage* sipQWebPage::createWindow( ::QWebPage::WebWindowType a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_createWindow);

    if (!sipMeth)
        return  ::QWebPage::createWindow(a0);

    extern  ::QWebPage* sipVH_QtWebKit_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebPage::WebWindowType);

    return sipVH_QtWebKit_62(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebPage::supportsExtension( ::QWebPage::Extension a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_supportsExtension);

    if (!sipMeth)
        return  ::QWebPage::supportsExtension(a0);

    extern bool sipVH_QtWebKit_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebPage::Extension);

    return sipVH_QtWebKit_61(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebPage::extension( ::QWebPage::Extension a0,const  ::QWebPage::ExtensionOption*a1, ::QWebPage::ExtensionReturn*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_extension);

    if (!sipMeth)
        return  ::QWebPage::extension(a0,a1,a2);

    extern bool sipVH_QtWebKit_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebPage::Extension,const  ::QWebPage::ExtensionOption*, ::QWebPage::ExtensionReturn*);

    return sipVH_QtWebKit_60(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQWebPage::triggerAction( ::QWebPage::WebAction a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_triggerAction);

    if (!sipMeth)
    {
         ::QWebPage::triggerAction(a0,a1);
        return;
    }

    extern void sipVH_QtWebKit_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebPage::WebAction,bool);

    sipVH_QtWebKit_59(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQWebPage::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QWebPage::event(a0);

    extern bool sipVH_QtWebKit_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWebKit_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebPage::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QWebPage::eventFilter(a0,a1);

    extern bool sipVH_QtWebKit_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWebKit_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQWebPage::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QWebPage::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWebKit_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPage::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QWebPage::childEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWebKit_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPage::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QWebPage::customEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPage::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QWebPage::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWebKit_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtWebKit_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPage::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QWebPage::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWebKit_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtWebKit_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QWebPage_mainFrame, "mainFrame(self) -> QWebFrame");

extern "C" {static PyObject *meth_QWebPage_mainFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_mainFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QWebFrame*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mainFrame();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_mainFrame, doc_QWebPage_mainFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_currentFrame, "currentFrame(self) -> QWebFrame");

extern "C" {static PyObject *meth_QWebPage_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QWebFrame*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentFrame();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_currentFrame, doc_QWebPage_currentFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_history, "history(self) -> QWebHistory");

extern "C" {static PyObject *meth_QWebPage_history(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QWebHistory*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->history();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_history, doc_QWebPage_history);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_settings, "settings(self) -> QWebSettings");

extern "C" {static PyObject *meth_QWebPage_settings(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QWebSettings*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->settings();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_settings, doc_QWebPage_settings);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setView, "setView(self, QWidget)");

extern "C" {static PyObject *meth_QWebPage_setView(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        PyObject *a0Keep;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebPage, &sipCpp, &a0Keep, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setView(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setView, doc_QWebPage_setView);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_view, "view(self) -> QWidget");

extern "C" {static PyObject *meth_QWebPage_view(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_view(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->view();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_view, doc_QWebPage_view);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_isModified, "isModified(self) -> bool");

extern "C" {static PyObject *meth_QWebPage_isModified(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isModified();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_isModified, doc_QWebPage_isModified);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_undoStack, "undoStack(self) -> QUndoStack");

extern "C" {static PyObject *meth_QWebPage_undoStack(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_undoStack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QUndoStack*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->undoStack();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QUndoStack,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_undoStack, doc_QWebPage_undoStack);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setNetworkAccessManager, "setNetworkAccessManager(self, QNetworkAccessManager)");

extern "C" {static PyObject *meth_QWebPage_setNetworkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setNetworkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QNetworkAccessManager* a0;
        PyObject *a0Keep;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebPage, &sipCpp, &a0Keep, sipType_QNetworkAccessManager, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNetworkAccessManager(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -5, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setNetworkAccessManager, doc_QWebPage_setNetworkAccessManager);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_networkAccessManager, "networkAccessManager(self) -> QNetworkAccessManager");

extern "C" {static PyObject *meth_QWebPage_networkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_networkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QNetworkAccessManager*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->networkAccessManager();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_networkAccessManager, doc_QWebPage_networkAccessManager);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setPluginFactory, "setPluginFactory(self, QWebPluginFactory)");

extern "C" {static PyObject *meth_QWebPage_setPluginFactory(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setPluginFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPluginFactory* a0;
        PyObject *a0Keep;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebPage, &sipCpp, &a0Keep, sipType_QWebPluginFactory, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPluginFactory(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -6, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setPluginFactory, doc_QWebPage_setPluginFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_pluginFactory, "pluginFactory(self) -> QWebPluginFactory");

extern "C" {static PyObject *meth_QWebPage_pluginFactory(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_pluginFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QWebPluginFactory*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pluginFactory();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPluginFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_pluginFactory, doc_QWebPage_pluginFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_totalBytes, "totalBytes(self) -> int");

extern "C" {static PyObject *meth_QWebPage_totalBytes(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_totalBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::quint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->totalBytes();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_totalBytes, doc_QWebPage_totalBytes);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_bytesReceived, "bytesReceived(self) -> int");

extern "C" {static PyObject *meth_QWebPage_bytesReceived(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_bytesReceived(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::quint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bytesReceived();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_bytesReceived, doc_QWebPage_bytesReceived);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_selectedText, "selectedText(self) -> str");

extern "C" {static PyObject *meth_QWebPage_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->selectedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_selectedText, doc_QWebPage_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_action, "action(self, QWebPage.WebAction) -> QAction");

extern "C" {static PyObject *meth_QWebPage_action(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_action(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPage::WebAction a0;
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_WebAction, &a0))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->action(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_action, doc_QWebPage_action);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_triggerAction, "triggerAction(self, QWebPage.WebAction, checked: bool = False)");

extern "C" {static PyObject *meth_QWebPage_triggerAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_triggerAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebPage::WebAction a0;
        bool a1 = 0;
         ::QWebPage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_WebAction, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebPage::triggerAction(a0,a1) : sipCpp->triggerAction(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_triggerAction, doc_QWebPage_triggerAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_viewportSize, "viewportSize(self) -> QSize");

extern "C" {static PyObject *meth_QWebPage_viewportSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_viewportSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize(sipCpp->viewportSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_viewportSize, doc_QWebPage_viewportSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setViewportSize, "setViewportSize(self, QSize)");

extern "C" {static PyObject *meth_QWebPage_setViewportSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setViewportSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSize* a0;
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewportSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setViewportSize, doc_QWebPage_setViewportSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QWebPage_event(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPage::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_event, doc_QWebPage_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QWebPage_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebPage, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->focusNextPrevChild(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_focusNextPrevChild, doc_QWebPage_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any");

extern "C" {static PyObject *meth_QWebPage_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::InputMethodQuery a0;
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant(sipCpp->inputMethodQuery(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_inputMethodQuery, doc_QWebPage_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_findText, "findText(self, str, options: QWebPage.FindFlags = 0) -> bool");

extern "C" {static PyObject *meth_QWebPage_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebPage::FindFlags a1def = 0;
         ::QWebPage::FindFlags* a1 = &a1def;
        int a1State = 0;
         ::QWebPage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebPage_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->findText(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebPage_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_findText, doc_QWebPage_findText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setForwardUnsupportedContent, "setForwardUnsupportedContent(self, bool)");

extern "C" {static PyObject *meth_QWebPage_setForwardUnsupportedContent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setForwardUnsupportedContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebPage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setForwardUnsupportedContent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setForwardUnsupportedContent, doc_QWebPage_setForwardUnsupportedContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_forwardUnsupportedContent, "forwardUnsupportedContent(self) -> bool");

extern "C" {static PyObject *meth_QWebPage_forwardUnsupportedContent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_forwardUnsupportedContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->forwardUnsupportedContent();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_forwardUnsupportedContent, doc_QWebPage_forwardUnsupportedContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setLinkDelegationPolicy, "setLinkDelegationPolicy(self, QWebPage.LinkDelegationPolicy)");

extern "C" {static PyObject *meth_QWebPage_setLinkDelegationPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setLinkDelegationPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPage::LinkDelegationPolicy a0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_LinkDelegationPolicy, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLinkDelegationPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setLinkDelegationPolicy, doc_QWebPage_setLinkDelegationPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_linkDelegationPolicy, "linkDelegationPolicy(self) -> QWebPage.LinkDelegationPolicy");

extern "C" {static PyObject *meth_QWebPage_linkDelegationPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_linkDelegationPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QWebPage::LinkDelegationPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->linkDelegationPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QWebPage_LinkDelegationPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_linkDelegationPolicy, doc_QWebPage_linkDelegationPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setPalette, "setPalette(self, QPalette)");

extern "C" {static PyObject *meth_QWebPage_setPalette(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setPalette(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPalette* a0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QPalette, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPalette(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setPalette, doc_QWebPage_setPalette);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_palette, "palette(self) -> QPalette");

extern "C" {static PyObject *meth_QWebPage_palette(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_palette(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QPalette*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPalette(sipCpp->palette());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_palette, doc_QWebPage_palette);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_swallowContextMenuEvent, "swallowContextMenuEvent(self, QContextMenuEvent) -> bool");

extern "C" {static PyObject *meth_QWebPage_swallowContextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_swallowContextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QContextMenuEvent* a0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->swallowContextMenuEvent(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_swallowContextMenuEvent, doc_QWebPage_swallowContextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_updatePositionDependentActions, "updatePositionDependentActions(self, QPoint)");

extern "C" {static PyObject *meth_QWebPage_updatePositionDependentActions(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_updatePositionDependentActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->updatePositionDependentActions(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_updatePositionDependentActions, doc_QWebPage_updatePositionDependentActions);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_extension, "extension(self, QWebPage.Extension, option: QWebPage.ExtensionOption = None, output: QWebPage.ExtensionReturn = None) -> bool");

extern "C" {static PyObject *meth_QWebPage_extension(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_extension(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebPage::Extension a0;
        const  ::QWebPage::ExtensionOption* a1 = 0;
         ::QWebPage::ExtensionReturn* a2 = 0;
         ::QWebPage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_output,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_Extension, &a0, sipType_QWebPage_ExtensionOption, &a1, sipType_QWebPage_ExtensionReturn, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPage::extension(a0,a1,a2) : sipCpp->extension(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_extension, doc_QWebPage_extension);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_supportsExtension, "supportsExtension(self, QWebPage.Extension) -> bool");

extern "C" {static PyObject *meth_QWebPage_supportsExtension(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_supportsExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebPage::Extension a0;
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_Extension, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPage::supportsExtension(a0) : sipCpp->supportsExtension(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_supportsExtension, doc_QWebPage_supportsExtension);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_createWindow, "createWindow(self, QWebPage.WebWindowType) -> QWebPage");

extern "C" {static PyObject *meth_QWebPage_createWindow(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_createWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebPage::WebWindowType a0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_WebWindowType, &a0))
        {
             ::QWebPage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPage::createWindow(a0) : sipCpp->createWindow(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_createWindow, doc_QWebPage_createWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_createPlugin, "createPlugin(self, str, QUrl, Sequence[str], Sequence[str]) -> QObject");

extern "C" {static PyObject *meth_QWebPage_createPlugin(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_createPlugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrl* a1;
        const  ::QStringList* a2;
        int a2State = 0;
        const  ::QStringList* a3;
        int a3State = 0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J9J1J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1, sipType_QStringList,&a2, &a2State, sipType_QStringList,&a3, &a3State))
        {
             ::QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPage::createPlugin(*a0,*a1,*a2,*a3) : sipCpp->createPlugin(*a0,*a1,*a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a2),sipType_QStringList,a2State);
            sipReleaseType(const_cast< ::QStringList *>(a3),sipType_QStringList,a3State);

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_createPlugin, doc_QWebPage_createPlugin);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_acceptNavigationRequest, "acceptNavigationRequest(self, QWebFrame, QNetworkRequest, QWebPage.NavigationType) -> bool");

extern "C" {static PyObject *meth_QWebPage_acceptNavigationRequest(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_acceptNavigationRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebFrame* a0;
        const  ::QNetworkRequest* a1;
         ::QWebPage::NavigationType a2;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9E", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QNetworkRequest, &a1, sipType_QWebPage_NavigationType, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPage::acceptNavigationRequest(a0,*a1,a2) : sipCpp->acceptNavigationRequest(a0,*a1,a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_acceptNavigationRequest, doc_QWebPage_acceptNavigationRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_chooseFile, "chooseFile(self, QWebFrame, str) -> str");

extern "C" {static PyObject *meth_QWebPage_chooseFile(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_chooseFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebFrame* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QWebPage::chooseFile(a0,*a1) : sipCpp->chooseFile(a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_chooseFile, doc_QWebPage_chooseFile);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_javaScriptAlert, "javaScriptAlert(self, QWebFrame, str)");

extern "C" {static PyObject *meth_QWebPage_javaScriptAlert(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptAlert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebFrame* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebPage::javaScriptAlert(a0,*a1) : sipCpp->javaScriptAlert(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_javaScriptAlert, doc_QWebPage_javaScriptAlert);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_javaScriptConfirm, "javaScriptConfirm(self, QWebFrame, str) -> bool");

extern "C" {static PyObject *meth_QWebPage_javaScriptConfirm(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptConfirm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebFrame* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPage::javaScriptConfirm(a0,*a1) : sipCpp->javaScriptConfirm(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_javaScriptConfirm, doc_QWebPage_javaScriptConfirm);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_javaScriptPrompt, "javaScriptPrompt(self, QWebFrame, str, str, QString) -> bool");

extern "C" {static PyObject *meth_QWebPage_javaScriptPrompt(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptPrompt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
         ::QWebFrame* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QString* a3;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J1J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;
            a3 = new  ::QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPage::javaScriptPrompt(a0,*a1,*a2,a3) : sipCpp->javaScriptPrompt(a0,*a1,*a2,a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipBuildResult(0,"(bN)",sipRes,a3,sipType_QString,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
         ::QWebFrame* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QString* a3;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J1J1J8", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPage::javaScriptPrompt(a0,*a1,*a2,a3) : sipCpp->javaScriptPrompt(a0,*a1,*a2,a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_javaScriptPrompt, doc_QWebPage_javaScriptPrompt);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_javaScriptConsoleMessage, "javaScriptConsoleMessage(self, str, int, str)");

extern "C" {static PyObject *meth_QWebPage_javaScriptConsoleMessage(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptConsoleMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1iJ1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebPage::javaScriptConsoleMessage(*a0,a1,*a2) : sipCpp->javaScriptConsoleMessage(*a0,a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_javaScriptConsoleMessage, doc_QWebPage_javaScriptConsoleMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_userAgentForUrl, "userAgentForUrl(self, QUrl) -> str");

extern "C" {static PyObject *meth_QWebPage_userAgentForUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_userAgentForUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QUrl, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QWebPage::userAgentForUrl(*a0) : sipCpp->userAgentForUrl(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_userAgentForUrl, doc_QWebPage_userAgentForUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setContentEditable, "setContentEditable(self, bool)");

extern "C" {static PyObject *meth_QWebPage_setContentEditable(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setContentEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebPage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContentEditable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setContentEditable, doc_QWebPage_setContentEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_isContentEditable, "isContentEditable(self) -> bool");

extern "C" {static PyObject *meth_QWebPage_isContentEditable(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_isContentEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isContentEditable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_isContentEditable, doc_QWebPage_isContentEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_createStandardContextMenu, "createStandardContextMenu(self) -> QMenu");

extern "C" {static PyObject *meth_QWebPage_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QMenu*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardContextMenu();
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_createStandardContextMenu, doc_QWebPage_createStandardContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_frameAt, "frameAt(self, QPoint) -> QWebFrame");

extern "C" {static PyObject *meth_QWebPage_frameAt(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_frameAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QPoint, &a0))
        {
             ::QWebFrame*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->frameAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_frameAt, doc_QWebPage_frameAt);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_preferredContentsSize, "preferredContentsSize(self) -> QSize");

extern "C" {static PyObject *meth_QWebPage_preferredContentsSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_preferredContentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize(sipCpp->preferredContentsSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_preferredContentsSize, doc_QWebPage_preferredContentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setPreferredContentsSize, "setPreferredContentsSize(self, QSize)");

extern "C" {static PyObject *meth_QWebPage_setPreferredContentsSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setPreferredContentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSize* a0;
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPreferredContentsSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setPreferredContentsSize, doc_QWebPage_setPreferredContentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_shouldInterruptJavaScript, "shouldInterruptJavaScript(self) -> bool");

extern "C" {static PyObject *meth_QWebPage_shouldInterruptJavaScript(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_shouldInterruptJavaScript(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->shouldInterruptJavaScript();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_shouldInterruptJavaScript, doc_QWebPage_shouldInterruptJavaScript);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_hasSelection, "hasSelection(self) -> bool");

extern "C" {static PyObject *meth_QWebPage_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasSelection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_hasSelection, doc_QWebPage_hasSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_selectedHtml, "selectedHtml(self) -> str");

extern "C" {static PyObject *meth_QWebPage_selectedHtml(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_selectedHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->selectedHtml());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_selectedHtml, doc_QWebPage_selectedHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_viewportAttributesForSize, "viewportAttributesForSize(self, QSize) -> QWebPage.ViewportAttributes");

extern "C" {static PyObject *meth_QWebPage_viewportAttributesForSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_viewportAttributesForSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSize* a0;
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QSize, &a0))
        {
             ::QWebPage::ViewportAttributes*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QWebPage::ViewportAttributes(sipCpp->viewportAttributesForSize(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWebPage_ViewportAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_viewportAttributesForSize, doc_QWebPage_viewportAttributesForSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setActualVisibleContentRect, "setActualVisibleContentRect(self, QRect)");

extern "C" {static PyObject *meth_QWebPage_setActualVisibleContentRect(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setActualVisibleContentRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRect* a0;
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setActualVisibleContentRect(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setActualVisibleContentRect, doc_QWebPage_setActualVisibleContentRect);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setFeaturePermission, "setFeaturePermission(self, QWebFrame, QWebPage.Feature, QWebPage.PermissionPolicy)");

extern "C" {static PyObject *meth_QWebPage_setFeaturePermission(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setFeaturePermission(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebFrame* a0;
         ::QWebPage::Feature a1;
         ::QWebPage::PermissionPolicy a2;
         ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QWebPage_Feature, &a1, sipType_QWebPage_PermissionPolicy, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFeaturePermission(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setFeaturePermission, doc_QWebPage_setFeaturePermission);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_supportedContentTypes, "supportedContentTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QWebPage_supportedContentTypes(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_supportedContentTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->supportedContentTypes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_supportedContentTypes, doc_QWebPage_supportedContentTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_supportsContentType, "supportsContentType(self, str) -> bool");

extern "C" {static PyObject *meth_QWebPage_supportsContentType(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_supportsContentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsContentType(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_supportsContentType, doc_QWebPage_supportsContentType);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWebPage(void *, const sipTypeDef *);}
static void *cast_QWebPage(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWebPage *sipCpp = reinterpret_cast< ::QWebPage *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebPage(void *, int);}
static void release_QWebPage(void *sipCppV, int)
{
     ::QWebPage *sipCpp = reinterpret_cast< ::QWebPage *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebPage(sipSimpleWrapper *);}
static void dealloc_QWebPage(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQWebPage *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWebPage(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QWebPage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebPage(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebPage *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWebPage(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebPage[] = {{5, 0, 1}};


static PyMethodDef methods_QWebPage[] = {
    {SIP_MLNAME_CAST(sipName_acceptNavigationRequest), meth_QWebPage_acceptNavigationRequest, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_acceptNavigationRequest)},
    {SIP_MLNAME_CAST(sipName_action), meth_QWebPage_action, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_action)},
    {SIP_MLNAME_CAST(sipName_bytesReceived), meth_QWebPage_bytesReceived, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_bytesReceived)},
    {SIP_MLNAME_CAST(sipName_chooseFile), meth_QWebPage_chooseFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_chooseFile)},
    {SIP_MLNAME_CAST(sipName_createPlugin), meth_QWebPage_createPlugin, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_createPlugin)},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QWebPage_createStandardContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_createStandardContextMenu)},
    {SIP_MLNAME_CAST(sipName_createWindow), meth_QWebPage_createWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_createWindow)},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QWebPage_currentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_currentFrame)},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebPage_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_event)},
    {SIP_MLNAME_CAST(sipName_extension), (PyCFunction)meth_QWebPage_extension, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_extension)},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QWebPage_findText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_findText)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QWebPage_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_forwardUnsupportedContent), meth_QWebPage_forwardUnsupportedContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_forwardUnsupportedContent)},
    {SIP_MLNAME_CAST(sipName_frameAt), meth_QWebPage_frameAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_frameAt)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QWebPage_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_hasSelection)},
    {SIP_MLNAME_CAST(sipName_history), meth_QWebPage_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_history)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QWebPage_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isContentEditable), meth_QWebPage_isContentEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_isContentEditable)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QWebPage_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_isModified)},
    {SIP_MLNAME_CAST(sipName_javaScriptAlert), meth_QWebPage_javaScriptAlert, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_javaScriptAlert)},
    {SIP_MLNAME_CAST(sipName_javaScriptConfirm), meth_QWebPage_javaScriptConfirm, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_javaScriptConfirm)},
    {SIP_MLNAME_CAST(sipName_javaScriptConsoleMessage), meth_QWebPage_javaScriptConsoleMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_javaScriptConsoleMessage)},
    {SIP_MLNAME_CAST(sipName_javaScriptPrompt), meth_QWebPage_javaScriptPrompt, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_javaScriptPrompt)},
    {SIP_MLNAME_CAST(sipName_linkDelegationPolicy), meth_QWebPage_linkDelegationPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_linkDelegationPolicy)},
    {SIP_MLNAME_CAST(sipName_mainFrame), meth_QWebPage_mainFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_mainFrame)},
    {SIP_MLNAME_CAST(sipName_networkAccessManager), meth_QWebPage_networkAccessManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_networkAccessManager)},
    {SIP_MLNAME_CAST(sipName_palette), meth_QWebPage_palette, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_palette)},
    {SIP_MLNAME_CAST(sipName_pluginFactory), meth_QWebPage_pluginFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_pluginFactory)},
    {SIP_MLNAME_CAST(sipName_preferredContentsSize), meth_QWebPage_preferredContentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_preferredContentsSize)},
    {SIP_MLNAME_CAST(sipName_selectedHtml), meth_QWebPage_selectedHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_selectedHtml)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QWebPage_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_selectedText)},
    {SIP_MLNAME_CAST(sipName_setActualVisibleContentRect), meth_QWebPage_setActualVisibleContentRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setActualVisibleContentRect)},
    {SIP_MLNAME_CAST(sipName_setContentEditable), meth_QWebPage_setContentEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setContentEditable)},
    {SIP_MLNAME_CAST(sipName_setFeaturePermission), meth_QWebPage_setFeaturePermission, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setFeaturePermission)},
    {SIP_MLNAME_CAST(sipName_setForwardUnsupportedContent), meth_QWebPage_setForwardUnsupportedContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setForwardUnsupportedContent)},
    {SIP_MLNAME_CAST(sipName_setLinkDelegationPolicy), meth_QWebPage_setLinkDelegationPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setLinkDelegationPolicy)},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessManager), meth_QWebPage_setNetworkAccessManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setNetworkAccessManager)},
    {SIP_MLNAME_CAST(sipName_setPalette), meth_QWebPage_setPalette, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setPalette)},
    {SIP_MLNAME_CAST(sipName_setPluginFactory), meth_QWebPage_setPluginFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setPluginFactory)},
    {SIP_MLNAME_CAST(sipName_setPreferredContentsSize), meth_QWebPage_setPreferredContentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setPreferredContentsSize)},
    {SIP_MLNAME_CAST(sipName_setView), meth_QWebPage_setView, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setView)},
    {SIP_MLNAME_CAST(sipName_setViewportSize), meth_QWebPage_setViewportSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setViewportSize)},
    {SIP_MLNAME_CAST(sipName_settings), meth_QWebPage_settings, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_settings)},
    {SIP_MLNAME_CAST(sipName_shouldInterruptJavaScript), meth_QWebPage_shouldInterruptJavaScript, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_shouldInterruptJavaScript)},
    {SIP_MLNAME_CAST(sipName_supportedContentTypes), meth_QWebPage_supportedContentTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_supportedContentTypes)},
    {SIP_MLNAME_CAST(sipName_supportsContentType), meth_QWebPage_supportsContentType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_supportsContentType)},
    {SIP_MLNAME_CAST(sipName_supportsExtension), meth_QWebPage_supportsExtension, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_supportsExtension)},
    {SIP_MLNAME_CAST(sipName_swallowContextMenuEvent), meth_QWebPage_swallowContextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_swallowContextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_totalBytes), meth_QWebPage_totalBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_totalBytes)},
    {SIP_MLNAME_CAST(sipName_triggerAction), (PyCFunction)meth_QWebPage_triggerAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_triggerAction)},
    {SIP_MLNAME_CAST(sipName_undoStack), meth_QWebPage_undoStack, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_undoStack)},
    {SIP_MLNAME_CAST(sipName_updatePositionDependentActions), meth_QWebPage_updatePositionDependentActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_updatePositionDependentActions)},
    {SIP_MLNAME_CAST(sipName_userAgentForUrl), meth_QWebPage_userAgentForUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_userAgentForUrl)},
    {SIP_MLNAME_CAST(sipName_view), meth_QWebPage_view, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_view)},
    {SIP_MLNAME_CAST(sipName_viewportAttributesForSize), meth_QWebPage_viewportAttributesForSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_viewportAttributesForSize)},
    {SIP_MLNAME_CAST(sipName_viewportSize), meth_QWebPage_viewportSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_viewportSize)}
};

static sipEnumMemberDef enummembers_QWebPage[] = {
    {sipName_AlignCenter, static_cast<int>( ::QWebPage::AlignCenter), 36},
    {sipName_AlignJustified, static_cast<int>( ::QWebPage::AlignJustified), 36},
    {sipName_AlignLeft, static_cast<int>( ::QWebPage::AlignLeft), 36},
    {sipName_AlignRight, static_cast<int>( ::QWebPage::AlignRight), 36},
    {sipName_Back, static_cast<int>( ::QWebPage::Back), 36},
    {sipName_ChooseMultipleFilesExtension, static_cast<int>( ::QWebPage::ChooseMultipleFilesExtension), 26},
    {sipName_Copy, static_cast<int>( ::QWebPage::Copy), 36},
    {sipName_CopyImageToClipboard, static_cast<int>( ::QWebPage::CopyImageToClipboard), 36},
    {sipName_CopyImageUrlToClipboard, static_cast<int>( ::QWebPage::CopyImageUrlToClipboard), 36},
    {sipName_CopyLinkToClipboard, static_cast<int>( ::QWebPage::CopyLinkToClipboard), 36},
    {sipName_Cut, static_cast<int>( ::QWebPage::Cut), 36},
    {sipName_DelegateAllLinks, static_cast<int>( ::QWebPage::DelegateAllLinks), 32},
    {sipName_DelegateExternalLinks, static_cast<int>( ::QWebPage::DelegateExternalLinks), 32},
    {sipName_DeleteEndOfWord, static_cast<int>( ::QWebPage::DeleteEndOfWord), 36},
    {sipName_DeleteStartOfWord, static_cast<int>( ::QWebPage::DeleteStartOfWord), 36},
    {sipName_DontDelegateLinks, static_cast<int>( ::QWebPage::DontDelegateLinks), 32},
    {sipName_DownloadImageToDisk, static_cast<int>( ::QWebPage::DownloadImageToDisk), 36},
    {sipName_DownloadLinkToDisk, static_cast<int>( ::QWebPage::DownloadLinkToDisk), 36},
    {sipName_ErrorPageExtension, static_cast<int>( ::QWebPage::ErrorPageExtension), 26},
    {sipName_FindBackward, static_cast<int>( ::QWebPage::FindBackward), 30},
    {sipName_FindCaseSensitively, static_cast<int>( ::QWebPage::FindCaseSensitively), 30},
    {sipName_FindWrapsAroundDocument, static_cast<int>( ::QWebPage::FindWrapsAroundDocument), 30},
    {sipName_Forward, static_cast<int>( ::QWebPage::Forward), 36},
    {sipName_Geolocation, static_cast<int>( ::QWebPage::Geolocation), 29},
    {sipName_HighlightAllOccurrences, static_cast<int>( ::QWebPage::HighlightAllOccurrences), 30},
    {sipName_Http, static_cast<int>( ::QWebPage::Http), 23},
    {sipName_Indent, static_cast<int>( ::QWebPage::Indent), 36},
    {sipName_InsertLineSeparator, static_cast<int>( ::QWebPage::InsertLineSeparator), 36},
    {sipName_InsertOrderedList, static_cast<int>( ::QWebPage::InsertOrderedList), 36},
    {sipName_InsertParagraphSeparator, static_cast<int>( ::QWebPage::InsertParagraphSeparator), 36},
    {sipName_InsertUnorderedList, static_cast<int>( ::QWebPage::InsertUnorderedList), 36},
    {sipName_InspectElement, static_cast<int>( ::QWebPage::InspectElement), 36},
    {sipName_MoveToEndOfBlock, static_cast<int>( ::QWebPage::MoveToEndOfBlock), 36},
    {sipName_MoveToEndOfDocument, static_cast<int>( ::QWebPage::MoveToEndOfDocument), 36},
    {sipName_MoveToEndOfLine, static_cast<int>( ::QWebPage::MoveToEndOfLine), 36},
    {sipName_MoveToNextChar, static_cast<int>( ::QWebPage::MoveToNextChar), 36},
    {sipName_MoveToNextLine, static_cast<int>( ::QWebPage::MoveToNextLine), 36},
    {sipName_MoveToNextWord, static_cast<int>( ::QWebPage::MoveToNextWord), 36},
    {sipName_MoveToPreviousChar, static_cast<int>( ::QWebPage::MoveToPreviousChar), 36},
    {sipName_MoveToPreviousLine, static_cast<int>( ::QWebPage::MoveToPreviousLine), 36},
    {sipName_MoveToPreviousWord, static_cast<int>( ::QWebPage::MoveToPreviousWord), 36},
    {sipName_MoveToStartOfBlock, static_cast<int>( ::QWebPage::MoveToStartOfBlock), 36},
    {sipName_MoveToStartOfDocument, static_cast<int>( ::QWebPage::MoveToStartOfDocument), 36},
    {sipName_MoveToStartOfLine, static_cast<int>( ::QWebPage::MoveToStartOfLine), 36},
    {sipName_NavigationTypeBackOrForward, static_cast<int>( ::QWebPage::NavigationTypeBackOrForward), 33},
    {sipName_NavigationTypeFormResubmitted, static_cast<int>( ::QWebPage::NavigationTypeFormResubmitted), 33},
    {sipName_NavigationTypeFormSubmitted, static_cast<int>( ::QWebPage::NavigationTypeFormSubmitted), 33},
    {sipName_NavigationTypeLinkClicked, static_cast<int>( ::QWebPage::NavigationTypeLinkClicked), 33},
    {sipName_NavigationTypeOther, static_cast<int>( ::QWebPage::NavigationTypeOther), 33},
    {sipName_NavigationTypeReload, static_cast<int>( ::QWebPage::NavigationTypeReload), 33},
    {sipName_NoWebAction, static_cast<int>( ::QWebPage::NoWebAction), 36},
    {sipName_Notifications, static_cast<int>( ::QWebPage::Notifications), 29},
    {sipName_OpenFrameInNewWindow, static_cast<int>( ::QWebPage::OpenFrameInNewWindow), 36},
    {sipName_OpenImageInNewWindow, static_cast<int>( ::QWebPage::OpenImageInNewWindow), 36},
    {sipName_OpenLink, static_cast<int>( ::QWebPage::OpenLink), 36},
    {sipName_OpenLinkInNewWindow, static_cast<int>( ::QWebPage::OpenLinkInNewWindow), 36},
    {sipName_Outdent, static_cast<int>( ::QWebPage::Outdent), 36},
    {sipName_Paste, static_cast<int>( ::QWebPage::Paste), 36},
    {sipName_PasteAndMatchStyle, static_cast<int>( ::QWebPage::PasteAndMatchStyle), 36},
    {sipName_PermissionDeniedByUser, static_cast<int>( ::QWebPage::PermissionDeniedByUser), 34},
    {sipName_PermissionGrantedByUser, static_cast<int>( ::QWebPage::PermissionGrantedByUser), 34},
    {sipName_PermissionUnknown, static_cast<int>( ::QWebPage::PermissionUnknown), 34},
    {sipName_QtNetwork, static_cast<int>( ::QWebPage::QtNetwork), 23},
    {sipName_Redo, static_cast<int>( ::QWebPage::Redo), 36},
    {sipName_Reload, static_cast<int>( ::QWebPage::Reload), 36},
    {sipName_ReloadAndBypassCache, static_cast<int>( ::QWebPage::ReloadAndBypassCache), 36},
    {sipName_RemoveFormat, static_cast<int>( ::QWebPage::RemoveFormat), 36},
    {sipName_SelectAll, static_cast<int>( ::QWebPage::SelectAll), 36},
    {sipName_SelectEndOfBlock, static_cast<int>( ::QWebPage::SelectEndOfBlock), 36},
    {sipName_SelectEndOfDocument, static_cast<int>( ::QWebPage::SelectEndOfDocument), 36},
    {sipName_SelectEndOfLine, static_cast<int>( ::QWebPage::SelectEndOfLine), 36},
    {sipName_SelectNextChar, static_cast<int>( ::QWebPage::SelectNextChar), 36},
    {sipName_SelectNextLine, static_cast<int>( ::QWebPage::SelectNextLine), 36},
    {sipName_SelectNextWord, static_cast<int>( ::QWebPage::SelectNextWord), 36},
    {sipName_SelectPreviousChar, static_cast<int>( ::QWebPage::SelectPreviousChar), 36},
    {sipName_SelectPreviousLine, static_cast<int>( ::QWebPage::SelectPreviousLine), 36},
    {sipName_SelectPreviousWord, static_cast<int>( ::QWebPage::SelectPreviousWord), 36},
    {sipName_SelectStartOfBlock, static_cast<int>( ::QWebPage::SelectStartOfBlock), 36},
    {sipName_SelectStartOfDocument, static_cast<int>( ::QWebPage::SelectStartOfDocument), 36},
    {sipName_SelectStartOfLine, static_cast<int>( ::QWebPage::SelectStartOfLine), 36},
    {sipName_SetTextDirectionDefault, static_cast<int>( ::QWebPage::SetTextDirectionDefault), 36},
    {sipName_SetTextDirectionLeftToRight, static_cast<int>( ::QWebPage::SetTextDirectionLeftToRight), 36},
    {sipName_SetTextDirectionRightToLeft, static_cast<int>( ::QWebPage::SetTextDirectionRightToLeft), 36},
    {sipName_Stop, static_cast<int>( ::QWebPage::Stop), 36},
    {sipName_StopScheduledPageRefresh, static_cast<int>( ::QWebPage::StopScheduledPageRefresh), 36},
    {sipName_ToggleBold, static_cast<int>( ::QWebPage::ToggleBold), 36},
    {sipName_ToggleItalic, static_cast<int>( ::QWebPage::ToggleItalic), 36},
    {sipName_ToggleStrikethrough, static_cast<int>( ::QWebPage::ToggleStrikethrough), 36},
    {sipName_ToggleSubscript, static_cast<int>( ::QWebPage::ToggleSubscript), 36},
    {sipName_ToggleSuperscript, static_cast<int>( ::QWebPage::ToggleSuperscript), 36},
    {sipName_ToggleUnderline, static_cast<int>( ::QWebPage::ToggleUnderline), 36},
    {sipName_Undo, static_cast<int>( ::QWebPage::Undo), 36},
    {sipName_WebBrowserWindow, static_cast<int>( ::QWebPage::WebBrowserWindow), 37},
    {sipName_WebKit, static_cast<int>( ::QWebPage::WebKit), 23},
    {sipName_WebModalDialog, static_cast<int>( ::QWebPage::WebModalDialog), 37},
};

PyDoc_STRVAR(doc_QWebPage, "\1QWebPage(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QWebPage[] = {
    {"featurePermissionRequestCanceled(QWebFrame*,QWebPage::Feature)", "\1featurePermissionRequestCanceled(self, QWebFrame, QWebPage.Feature)", 0, 0},
    {"featurePermissionRequested(QWebFrame*,QWebPage::Feature)", "\1featurePermissionRequested(self, QWebFrame, QWebPage.Feature)", 0, 0},
    {"viewportChangeRequested()", "\1viewportChangeRequested(self)", 0, 0},
    {"applicationCacheQuotaExceeded(QWebSecurityOrigin*,quint64)", "\1applicationCacheQuotaExceeded(self, QWebSecurityOrigin, int)", 0, 0},
    {"restoreFrameStateRequested(QWebFrame*)", "\1restoreFrameStateRequested(self, QWebFrame)", 0, 0},
    {"saveFrameStateRequested(QWebFrame*,QWebHistoryItem*)", "\1saveFrameStateRequested(self, QWebFrame, QWebHistoryItem)", 0, 0},
    {"databaseQuotaExceeded(QWebFrame*,QString)", "\1databaseQuotaExceeded(self, QWebFrame, str)", 0, 0},
    {"contentsChanged()", "\1contentsChanged(self)", 0, 0},
    {"microFocusChanged()", "\1microFocusChanged(self)", 0, 0},
    {"downloadRequested(QNetworkRequest)", "\1downloadRequested(self, QNetworkRequest)", 0, 0},
    {"unsupportedContent(QNetworkReply*)", "\1unsupportedContent(self, QNetworkReply)", 0, 0},
    {"menuBarVisibilityChangeRequested(bool)", "\1menuBarVisibilityChangeRequested(self, bool)", 0, 0},
    {"statusBarVisibilityChangeRequested(bool)", "\1statusBarVisibilityChangeRequested(self, bool)", 0, 0},
    {"toolBarVisibilityChangeRequested(bool)", "\1toolBarVisibilityChangeRequested(self, bool)", 0, 0},
    {"linkClicked(QUrl)", "\1linkClicked(self, QUrl)", 0, 0},
    {"printRequested(QWebFrame*)", "\1printRequested(self, QWebFrame)", 0, 0},
    {"windowCloseRequested()", "\1windowCloseRequested(self)", 0, 0},
    {"scrollRequested(int,int,QRect)", "\1scrollRequested(self, int, int, QRect)", 0, 0},
    {"repaintRequested(QRect)", "\1repaintRequested(self, QRect)", 0, 0},
    {"geometryChangeRequested(QRect)", "\1geometryChangeRequested(self, QRect)", 0, 0},
    {"frameCreated(QWebFrame*)", "\1frameCreated(self, QWebFrame)", 0, 0},
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"statusBarMessage(QString)", "\1statusBarMessage(self, str)", 0, 0},
    {"linkHovered(QString,QString,QString)", "\1linkHovered(self, str, str, str)", 0, 0},
    {"loadStarted()", "\1loadStarted(self)", 0, 0},
    {"loadProgress(int)", "\1loadProgress(self, int)", 0, 0},
    {"loadFinished(bool)", "\1loadFinished(self, bool)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QWebPage = {
    & ::QWebPage::staticMetaObject,
    0,
    signals_QWebPage
};


sipClassTypeDef sipTypeDef_QtWebKit_QWebPage = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebPage,
        {0},
        &plugin_QWebPage
    },
    {
        sipNameNr_QWebPage,
        {0, 0, 1},
        56, methods_QWebPage,
        95, enummembers_QWebPage,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebPage,
    -1,
    -1,
    supers_QWebPage,
    0,
    init_type_QWebPage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebPage,
    0,
    0,
    0,
    release_QWebPage,
    cast_QWebPage,
    0,
    0,
    0,
    0,
    0,
    0
};
