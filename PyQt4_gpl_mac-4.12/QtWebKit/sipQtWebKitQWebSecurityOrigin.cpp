/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebsecurityorigin.sip"
#include <qwebsecurityorigin.h>
#line 29 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"

#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 33 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebdatabase.sip"
#include <qwebdatabase.h>
#line 42 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 45 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"


PyDoc_STRVAR(doc_QWebSecurityOrigin_allOrigins, "allOrigins() -> object");

extern "C" {static PyObject *meth_QWebSecurityOrigin_allOrigins(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_allOrigins(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QWebSecurityOrigin>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QWebSecurityOrigin>( ::QWebSecurityOrigin::allOrigins());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebSecurityOrigin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_allOrigins, doc_QWebSecurityOrigin_allOrigins);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_scheme, "scheme(self) -> str");

extern "C" {static PyObject *meth_QWebSecurityOrigin_scheme(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_scheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->scheme());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_scheme, doc_QWebSecurityOrigin_scheme);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_host, "host(self) -> str");

extern "C" {static PyObject *meth_QWebSecurityOrigin_host(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_host(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->host());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_host, doc_QWebSecurityOrigin_host);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_port, "port(self) -> int");

extern "C" {static PyObject *meth_QWebSecurityOrigin_port(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_port(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->port();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_port, doc_QWebSecurityOrigin_port);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_databaseUsage, "databaseUsage(self) -> int");

extern "C" {static PyObject *meth_QWebSecurityOrigin_databaseUsage(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_databaseUsage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->databaseUsage();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_databaseUsage, doc_QWebSecurityOrigin_databaseUsage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_databaseQuota, "databaseQuota(self) -> int");

extern "C" {static PyObject *meth_QWebSecurityOrigin_databaseQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_databaseQuota(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->databaseQuota();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_databaseQuota, doc_QWebSecurityOrigin_databaseQuota);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_setDatabaseQuota, "setDatabaseQuota(self, int)");

extern "C" {static PyObject *meth_QWebSecurityOrigin_setDatabaseQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_setDatabaseQuota(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint64 a0;
         ::QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDatabaseQuota(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_setDatabaseQuota, doc_QWebSecurityOrigin_setDatabaseQuota);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_databases, "databases(self) -> object");

extern "C" {static PyObject *meth_QWebSecurityOrigin_databases(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_databases(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
            QList< ::QWebDatabase>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QWebDatabase>(sipCpp->databases());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebDatabase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_databases, doc_QWebSecurityOrigin_databases);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_addLocalScheme, "addLocalScheme(str)");

extern "C" {static PyObject *meth_QWebSecurityOrigin_addLocalScheme(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_addLocalScheme(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSecurityOrigin::addLocalScheme(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_addLocalScheme, doc_QWebSecurityOrigin_addLocalScheme);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_removeLocalScheme, "removeLocalScheme(str)");

extern "C" {static PyObject *meth_QWebSecurityOrigin_removeLocalScheme(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_removeLocalScheme(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSecurityOrigin::removeLocalScheme(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_removeLocalScheme, doc_QWebSecurityOrigin_removeLocalScheme);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_localSchemes, "localSchemes() -> List[str]");

extern "C" {static PyObject *meth_QWebSecurityOrigin_localSchemes(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_localSchemes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList( ::QWebSecurityOrigin::localSchemes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_localSchemes, doc_QWebSecurityOrigin_localSchemes);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_setApplicationCacheQuota, "setApplicationCacheQuota(self, int)");

extern "C" {static PyObject *meth_QWebSecurityOrigin_setApplicationCacheQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_setApplicationCacheQuota(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint64 a0;
         ::QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setApplicationCacheQuota(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_setApplicationCacheQuota, doc_QWebSecurityOrigin_setApplicationCacheQuota);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebSecurityOrigin(void *, int);}
static void release_QWebSecurityOrigin(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QWebSecurityOrigin *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebSecurityOrigin(sipSimpleWrapper *);}
static void dealloc_QWebSecurityOrigin(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWebSecurityOrigin(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QWebSecurityOrigin(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebSecurityOrigin(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QWebSecurityOrigin *sipCpp = 0;

    {
        const  ::QWebSecurityOrigin* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWebSecurityOrigin, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QWebSecurityOrigin(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QWebSecurityOrigin[] = {
    {SIP_MLNAME_CAST(sipName_addLocalScheme), meth_QWebSecurityOrigin_addLocalScheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_addLocalScheme)},
    {SIP_MLNAME_CAST(sipName_allOrigins), meth_QWebSecurityOrigin_allOrigins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_allOrigins)},
    {SIP_MLNAME_CAST(sipName_databaseQuota), meth_QWebSecurityOrigin_databaseQuota, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_databaseQuota)},
    {SIP_MLNAME_CAST(sipName_databaseUsage), meth_QWebSecurityOrigin_databaseUsage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_databaseUsage)},
    {SIP_MLNAME_CAST(sipName_databases), meth_QWebSecurityOrigin_databases, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_databases)},
    {SIP_MLNAME_CAST(sipName_host), meth_QWebSecurityOrigin_host, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_host)},
    {SIP_MLNAME_CAST(sipName_localSchemes), meth_QWebSecurityOrigin_localSchemes, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_localSchemes)},
    {SIP_MLNAME_CAST(sipName_port), meth_QWebSecurityOrigin_port, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_port)},
    {SIP_MLNAME_CAST(sipName_removeLocalScheme), meth_QWebSecurityOrigin_removeLocalScheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_removeLocalScheme)},
    {SIP_MLNAME_CAST(sipName_scheme), meth_QWebSecurityOrigin_scheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_scheme)},
    {SIP_MLNAME_CAST(sipName_setApplicationCacheQuota), meth_QWebSecurityOrigin_setApplicationCacheQuota, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_setApplicationCacheQuota)},
    {SIP_MLNAME_CAST(sipName_setDatabaseQuota), meth_QWebSecurityOrigin_setDatabaseQuota, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_setDatabaseQuota)}
};

PyDoc_STRVAR(doc_QWebSecurityOrigin, "\1QWebSecurityOrigin(QWebSecurityOrigin)");


static pyqt4ClassPluginDef plugin_QWebSecurityOrigin = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtWebKit_QWebSecurityOrigin = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QWebSecurityOrigin,
        {0},
        &plugin_QWebSecurityOrigin
    },
    {
        sipNameNr_QWebSecurityOrigin,
        {0, 0, 1},
        12, methods_QWebSecurityOrigin,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebSecurityOrigin,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QWebSecurityOrigin,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebSecurityOrigin,
    0,
    0,
    0,
    release_QWebSecurityOrigin,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
