/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qgraphicswebview.sip"
#include <qgraphicswebview.h>
#line 29 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"

#line 28 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 33 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 36 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 647 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 505 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 188 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 51 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 105 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 54 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 474 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 78 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 60 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 135 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 63 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 48 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 66 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 69 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 72 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 103 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 81 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 1966 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 84 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 87 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 159 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 90 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 93 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 96 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 99 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 102 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 56 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 105 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 108 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 111 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 114 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 117 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 596 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 218 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 123 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 239 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 126 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 607 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 574 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 110 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 135 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 138 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 141 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 144 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 147 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 182 "sip/QtGui/qgraphicswidget.sip"
#include <qgraphicswidget.h>
#line 150 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 153 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 156 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 159 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 162 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "sip/QtGui/qgraphicslayout.sip"
#include <qgraphicslayout.h>
#line 165 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 168 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 171 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 174 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 177 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 180 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 183 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 186 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 189 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 192 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 195 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 198 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "sip/QtGui/qgraphicstransform.sip"
#include <qgraphicstransform.h>
#line 201 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 204 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 1138 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 207 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 34 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 210 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 213 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 216 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 219 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 350 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 222 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 225 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 228 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 231 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 234 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 1098 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 237 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "sip/QtGui/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 240 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 28 "sip/QtGui/qgraphicslayoutitem.sip"
#include <qgraphicslayoutitem.h>
#line 243 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"
#line 26 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 246 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQGraphicsWebView.cpp"


class sipQGraphicsWebView : public  ::QGraphicsWebView
{
public:
    sipQGraphicsWebView( ::QGraphicsItem*);
    virtual ~sipQGraphicsWebView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void advance(int);
     ::QRectF boundingRect() const;
     ::QPainterPath shape() const;
    bool contains(const  ::QPointF&) const;
    bool collidesWithItem(const  ::QGraphicsItem*, ::Qt::ItemSelectionMode) const;
    bool collidesWithPath(const  ::QPainterPath&, ::Qt::ItemSelectionMode) const;
    bool isObscuredBy(const  ::QGraphicsItem*) const;
     ::QPainterPath opaqueArea() const;
    void paint( ::QPainter*,const  ::QStyleOptionGraphicsItem*, ::QWidget*);
    int type() const;
    void contextMenuEvent( ::QGraphicsSceneContextMenuEvent*);
    void dragEnterEvent( ::QGraphicsSceneDragDropEvent*);
    void dragLeaveEvent( ::QGraphicsSceneDragDropEvent*);
    void dragMoveEvent( ::QGraphicsSceneDragDropEvent*);
    void dropEvent( ::QGraphicsSceneDragDropEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void hoverEnterEvent( ::QGraphicsSceneHoverEvent*);
    void hoverLeaveEvent( ::QGraphicsSceneHoverEvent*);
    void hoverMoveEvent( ::QGraphicsSceneHoverEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
     ::QVariant itemChange( ::QGraphicsItem::GraphicsItemChange,const  ::QVariant&);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void mouseDoubleClickEvent( ::QGraphicsSceneMouseEvent*);
    void mouseMoveEvent( ::QGraphicsSceneMouseEvent*);
    void mousePressEvent( ::QGraphicsSceneMouseEvent*);
    void mouseReleaseEvent( ::QGraphicsSceneMouseEvent*);
    bool sceneEvent( ::QEvent*);
    bool sceneEventFilter( ::QGraphicsItem*, ::QEvent*);
    void wheelEvent( ::QGraphicsSceneWheelEvent*);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);
     ::QSizeF sizeHint( ::Qt::SizeHint,const  ::QSizeF&) const;
    void updateGeometry();
    void getContentsMargins( ::qreal*, ::qreal*, ::qreal*, ::qreal*) const;
    void setGeometry(const  ::QRectF&);
    void paintWindowFrame( ::QPainter*,const  ::QStyleOptionGraphicsItem*, ::QWidget*);
    void initStyleOption( ::QStyleOption*) const;
    bool windowFrameEvent( ::QEvent*);
     ::Qt::WindowFrameSection windowFrameSectionAt(const  ::QPointF&) const;
    void changeEvent( ::QEvent*);
    void closeEvent( ::QCloseEvent*);
    bool focusNextPrevChild(bool);
    void hideEvent( ::QHideEvent*);
    void moveEvent( ::QGraphicsSceneMoveEvent*);
    void polishEvent();
    void resizeEvent( ::QGraphicsSceneResizeEvent*);
    void showEvent( ::QShowEvent*);
    void grabMouseEvent( ::QEvent*);
    void ungrabMouseEvent( ::QEvent*);
    void grabKeyboardEvent( ::QEvent*);
    void ungrabKeyboardEvent( ::QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsWebView(const sipQGraphicsWebView &);
    sipQGraphicsWebView &operator = (const sipQGraphicsWebView &);

    char sipPyMethods[59];
};

sipQGraphicsWebView::sipQGraphicsWebView( ::QGraphicsItem*a0):  ::QGraphicsWebView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsWebView::~sipQGraphicsWebView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsWebView::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QGraphicsWebView);
}

int sipQGraphicsWebView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGraphicsWebView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QGraphicsWebView,_c,_id,_a);

    return _id;
}

void *sipQGraphicsWebView::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast(sipPySelf, sipType_QGraphicsWebView, _clname)) ? this :  ::QGraphicsWebView::qt_metacast(_clname);
}

void sipQGraphicsWebView::advance(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_advance);

    if (!sipMeth)
    {
         ::QGraphicsWebView::advance(a0);
        return;
    }

    extern void sipVH_QtWebKit_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtWebKit_37(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QRectF sipQGraphicsWebView::boundingRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_boundingRect);

    if (!sipMeth)
        return  ::QGraphicsWebView::boundingRect();

    extern  ::QRectF sipVH_QtWebKit_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_36(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QPainterPath sipQGraphicsWebView::shape() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_shape);

    if (!sipMeth)
        return  ::QGraphicsWebView::shape();

    extern  ::QPainterPath sipVH_QtWebKit_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_31(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQGraphicsWebView::contains(const  ::QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_contains);

    if (!sipMeth)
        return  ::QGraphicsWebView::contains(a0);

    extern bool sipVH_QtWebKit_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&);

    return sipVH_QtWebKit_35(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::collidesWithItem(const  ::QGraphicsItem*a0, ::Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_collidesWithItem);

    if (!sipMeth)
        return  ::QGraphicsWebView::collidesWithItem(a0,a1);

    extern bool sipVH_QtWebKit_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QGraphicsItem*, ::Qt::ItemSelectionMode);

    return sipVH_QtWebKit_34(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsWebView::collidesWithPath(const  ::QPainterPath& a0, ::Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_collidesWithPath);

    if (!sipMeth)
        return  ::QGraphicsWebView::collidesWithPath(a0,a1);

    extern bool sipVH_QtWebKit_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPainterPath&, ::Qt::ItemSelectionMode);

    return sipVH_QtWebKit_33(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsWebView::isObscuredBy(const  ::QGraphicsItem*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_isObscuredBy);

    if (!sipMeth)
        return  ::QGraphicsWebView::isObscuredBy(a0);

    extern bool sipVH_QtWebKit_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QGraphicsItem*);

    return sipVH_QtWebKit_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QPainterPath sipQGraphicsWebView::opaqueArea() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_opaqueArea);

    if (!sipMeth)
        return  ::QGraphicsWebView::opaqueArea();

    extern  ::QPainterPath sipVH_QtWebKit_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_31(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsWebView::paint( ::QPainter*a0,const  ::QStyleOptionGraphicsItem*a1, ::QWidget*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_paint);

    if (!sipMeth)
    {
         ::QGraphicsWebView::paint(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWebKit_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QStyleOptionGraphicsItem*, ::QWidget*);

    sipVH_QtWebKit_11(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

int sipQGraphicsWebView::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_type);

    if (!sipMeth)
        return  ::QGraphicsWebView::type();

    extern int sipVH_QtWebKit_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_30(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsWebView::contextMenuEvent( ::QGraphicsSceneContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneContextMenuEvent*);

    sipVH_QtWebKit_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::dragEnterEvent( ::QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneDragDropEvent*);

    sipVH_QtWebKit_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::dragLeaveEvent( ::QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneDragDropEvent*);

    sipVH_QtWebKit_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::dragMoveEvent( ::QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneDragDropEvent*);

    sipVH_QtWebKit_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::dropEvent( ::QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneDragDropEvent*);

    sipVH_QtWebKit_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWebKit_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWebKit_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::hoverEnterEvent( ::QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneHoverEvent*);

    sipVH_QtWebKit_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::hoverLeaveEvent( ::QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneHoverEvent*);

    sipVH_QtWebKit_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::hoverMoveEvent( ::QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneHoverEvent*);

    sipVH_QtWebKit_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWebKit_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQGraphicsWebView::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QGraphicsWebView::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWebKit_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWebKit_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQGraphicsWebView::itemChange( ::QGraphicsItem::GraphicsItemChange a0,const  ::QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_itemChange);

    if (!sipMeth)
        return  ::QGraphicsWebView::itemChange(a0,a1);

    extern  ::QVariant sipVH_QtWebKit_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsItem::GraphicsItemChange,const  ::QVariant&);

    return sipVH_QtWebKit_23(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsWebView::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWebKit_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWebKit_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::mouseDoubleClickEvent( ::QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneMouseEvent*);

    sipVH_QtWebKit_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::mouseMoveEvent( ::QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneMouseEvent*);

    sipVH_QtWebKit_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::mousePressEvent( ::QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneMouseEvent*);

    sipVH_QtWebKit_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::mouseReleaseEvent( ::QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneMouseEvent*);

    sipVH_QtWebKit_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::sceneEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_sceneEvent);

    if (!sipMeth)
        return  ::QGraphicsWebView::sceneEvent(a0);

    extern bool sipVH_QtWebKit_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWebKit_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::sceneEventFilter( ::QGraphicsItem*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_sceneEventFilter);

    if (!sipMeth)
        return  ::QGraphicsWebView::sceneEventFilter(a0,a1);

    extern bool sipVH_QtWebKit_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsItem*, ::QEvent*);

    return sipVH_QtWebKit_20(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsWebView::wheelEvent( ::QGraphicsSceneWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneWheelEvent*);

    sipVH_QtWebKit_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QGraphicsWebView::event(a0);

    extern bool sipVH_QtWebKit_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWebKit_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QGraphicsWebView::eventFilter(a0,a1);

    extern bool sipVH_QtWebKit_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWebKit_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsWebView::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWebKit_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::childEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWebKit_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::customEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QGraphicsWebView::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWebKit_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtWebKit_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QGraphicsWebView::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWebKit_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtWebKit_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSizeF sipQGraphicsWebView::sizeHint( ::Qt::SizeHint a0,const  ::QSizeF& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QGraphicsWebView::sizeHint(a0,a1);

    extern  ::QSizeF sipVH_QtWebKit_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::SizeHint,const  ::QSizeF&);

    return sipVH_QtWebKit_14(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsWebView::updateGeometry()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_updateGeometry);

    if (!sipMeth)
    {
         ::QGraphicsWebView::updateGeometry();
        return;
    }

    extern void sipVH_QtWebKit_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWebKit_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsWebView::getContentsMargins( ::qreal*a0, ::qreal*a1, ::qreal*a2, ::qreal*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_getContentsMargins);

    if (!sipMeth)
    {
         ::QGraphicsWebView::getContentsMargins(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWebKit_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qreal*, ::qreal*, ::qreal*, ::qreal*);

    sipVH_QtWebKit_13(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQGraphicsWebView::setGeometry(const  ::QRectF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
         ::QGraphicsWebView::setGeometry(a0);
        return;
    }

    extern void sipVH_QtWebKit_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&);

    sipVH_QtWebKit_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::paintWindowFrame( ::QPainter*a0,const  ::QStyleOptionGraphicsItem*a1, ::QWidget*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_paintWindowFrame);

    if (!sipMeth)
    {
         ::QGraphicsWebView::paintWindowFrame(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWebKit_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QStyleOptionGraphicsItem*, ::QWidget*);

    sipVH_QtWebKit_11(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQGraphicsWebView::initStyleOption( ::QStyleOption*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_initStyleOption);

    if (!sipMeth)
    {
         ::QGraphicsWebView::initStyleOption(a0);
        return;
    }

    extern void sipVH_QtWebKit_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyleOption*);

    sipVH_QtWebKit_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::windowFrameEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_windowFrameEvent);

    if (!sipMeth)
        return  ::QGraphicsWebView::windowFrameEvent(a0);

    extern bool sipVH_QtWebKit_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWebKit_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::Qt::WindowFrameSection sipQGraphicsWebView::windowFrameSectionAt(const  ::QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_windowFrameSectionAt);

    if (!sipMeth)
        return  ::QGraphicsWebView::windowFrameSectionAt(a0);

    extern  ::Qt::WindowFrameSection sipVH_QtWebKit_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&);

    return sipVH_QtWebKit_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWebKit_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QGraphicsWebView::focusNextPrevChild(a0);

    extern bool sipVH_QtWebKit_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWebKit_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWebKit_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::moveEvent( ::QGraphicsSceneMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneMoveEvent*);

    sipVH_QtWebKit_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::polishEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_polishEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::polishEvent();
        return;
    }

    extern void sipVH_QtWebKit_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWebKit_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsWebView::resizeEvent( ::QGraphicsSceneResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneResizeEvent*);

    sipVH_QtWebKit_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::showEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWebKit_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::grabMouseEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_grabMouseEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::grabMouseEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::ungrabMouseEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_ungrabMouseEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::ungrabMouseEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::grabKeyboardEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_grabKeyboardEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::grabKeyboardEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::ungrabKeyboardEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_ungrabKeyboardEvent);

    if (!sipMeth)
    {
         ::QGraphicsWebView::ungrabKeyboardEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGraphicsWebView_page, "page(self) -> QWebPage");

extern "C" {static PyObject *meth_QGraphicsWebView_page(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_page(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
             ::QWebPage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->page();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_page, doc_QGraphicsWebView_page);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setPage, "setPage(self, QWebPage)");

extern "C" {static PyObject *meth_QGraphicsWebView_setPage(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPage* a0;
        PyObject *a0Keep;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0Keep, sipType_QWebPage, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPage(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setPage, doc_QGraphicsWebView_setPage);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QGraphicsWebView_url(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_url, doc_QGraphicsWebView_url);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QGraphicsWebView_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setUrl, doc_QGraphicsWebView_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_title, "title(self) -> str");

extern "C" {static PyObject *meth_QGraphicsWebView_title(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->title());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_title, doc_QGraphicsWebView_title);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QGraphicsWebView_icon(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
             ::QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_icon, doc_QGraphicsWebView_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_zoomFactor, "zoomFactor(self) -> float");

extern "C" {static PyObject *meth_QGraphicsWebView_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->zoomFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_zoomFactor, doc_QGraphicsWebView_zoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setZoomFactor, "setZoomFactor(self, float)");

extern "C" {static PyObject *meth_QGraphicsWebView_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setZoomFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setZoomFactor, doc_QGraphicsWebView_setZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_isModified, "isModified(self) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_isModified(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isModified();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_isModified, doc_QGraphicsWebView_isModified);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_load, "load(self, QUrl)\n"
    "load(self, QNetworkRequest, operation: QNetworkAccessManager.Operation = QNetworkAccessManager.GetOperation, body: Union[QByteArray, bytes, bytearray] = QByteArray())");

extern "C" {static PyObject *meth_QGraphicsWebView_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QNetworkRequest* a0;
         ::QNetworkAccessManager::Operation a1 = QNetworkAccessManager::GetOperation;
        const  ::QByteArray& a2def = QByteArray();
        const  ::QByteArray* a2 = &a2def;
        int a2State = 0;
         ::QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
            sipName_body,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EJ1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QNetworkAccessManager_Operation, &a1, sipType_QByteArray, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a2),sipType_QByteArray,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_load, doc_QGraphicsWebView_load);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setHtml, "setHtml(self, str, baseUrl: QUrl = QUrl())");

extern "C" {static PyObject *meth_QGraphicsWebView_setHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrl& a1def = QUrl();
        const  ::QUrl* a1 = &a1def;
         ::QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHtml(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setHtml, doc_QGraphicsWebView_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setContent, "setContent(self, Union[QByteArray, bytes, bytearray], mimeType: str = '', baseUrl: QUrl = QUrl())");

extern "C" {static PyObject *meth_QGraphicsWebView_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QUrl& a2def = QUrl();
        const  ::QUrl* a2 = &a2def;
         ::QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContent(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setContent, doc_QGraphicsWebView_setContent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_history, "history(self) -> QWebHistory");

extern "C" {static PyObject *meth_QGraphicsWebView_history(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
             ::QWebHistory*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->history();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_history, doc_QGraphicsWebView_history);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_settings, "settings(self) -> QWebSettings");

extern "C" {static PyObject *meth_QGraphicsWebView_settings(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
             ::QWebSettings*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->settings();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_settings, doc_QGraphicsWebView_settings);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_pageAction, "pageAction(self, QWebPage.WebAction) -> QAction");

extern "C" {static PyObject *meth_QGraphicsWebView_pageAction(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_pageAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPage::WebAction a0;
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QWebPage_WebAction, &a0))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageAction(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_pageAction, doc_QGraphicsWebView_pageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_triggerPageAction, "triggerPageAction(self, QWebPage.WebAction, checked: bool = False)");

extern "C" {static PyObject *meth_QGraphicsWebView_triggerPageAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_triggerPageAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPage::WebAction a0;
        bool a1 = 0;
         ::QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QWebPage_WebAction, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->triggerPageAction(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_triggerPageAction, doc_QGraphicsWebView_triggerPageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_findText, "findText(self, str, options: QWebPage.FindFlags = 0) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebPage::FindFlags a1def = 0;
         ::QWebPage::FindFlags* a1 = &a1def;
        int a1State = 0;
         ::QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebPage_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->findText(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebPage_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_findText, doc_QGraphicsWebView_findText);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setGeometry, "setGeometry(self, QRectF)");

extern "C" {static PyObject *meth_QGraphicsWebView_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRectF* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QRectF, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::setGeometry(*a0) : sipCpp->setGeometry(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setGeometry, doc_QGraphicsWebView_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_updateGeometry, "updateGeometry(self)");

extern "C" {static PyObject *meth_QGraphicsWebView_updateGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_updateGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::updateGeometry() : sipCpp->updateGeometry());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_updateGeometry, doc_QGraphicsWebView_updateGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_paint, "paint(self, QPainter, QStyleOptionGraphicsItem, widget: QWidget = None)");

extern "C" {static PyObject *meth_QGraphicsWebView_paint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_paint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QStyleOptionGraphicsItem* a1;
         ::QWidget* a2 = 0;
         ::QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J8|J8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionGraphicsItem, &a1, sipType_QWidget, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::paint(a0,a1,a2) : sipCpp->paint(a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_paint, doc_QGraphicsWebView_paint);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_itemChange, "itemChange(self, QGraphicsItem.GraphicsItemChange, Any) -> Any");

extern "C" {static PyObject *meth_QGraphicsWebView_itemChange(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_itemChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsItem::GraphicsItemChange a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsItem_GraphicsItemChange, &a0, sipType_QVariant,&a1, &a1State))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::itemChange(a0,*a1) : sipCpp->itemChange(a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_itemChange, doc_QGraphicsWebView_itemChange);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_event(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_event, doc_QGraphicsWebView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_sizeHint, "sizeHint(self, Qt.SizeHint, QSizeF) -> QSizeF");

extern "C" {static PyObject *meth_QGraphicsWebView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::SizeHint a0;
        const  ::QSizeF* a1;
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_Qt_SizeHint, &a0, sipType_QSizeF, &a1))
        {
             ::QSizeF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSizeF((sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::sizeHint(a0,*a1) : sipCpp->sizeHint(a0,*a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_sizeHint, doc_QGraphicsWebView_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any");

extern "C" {static PyObject *meth_QGraphicsWebView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_inputMethodQuery, doc_QGraphicsWebView_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_stop, "stop(self)");

extern "C" {static PyObject *meth_QGraphicsWebView_stop(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_stop, doc_QGraphicsWebView_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_back, "back(self)");

extern "C" {static PyObject *meth_QGraphicsWebView_back(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->back();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_back, doc_QGraphicsWebView_back);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_forward, "forward(self)");

extern "C" {static PyObject *meth_QGraphicsWebView_forward(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_forward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->forward();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_forward, doc_QGraphicsWebView_forward);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_reload, "reload(self)");

extern "C" {static PyObject *meth_QGraphicsWebView_reload(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_reload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reload();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_reload, doc_QGraphicsWebView_reload);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_mousePressEvent, "mousePressEvent(self, QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneMouseEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mousePressEvent, doc_QGraphicsWebView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneMouseEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mouseDoubleClickEvent, doc_QGraphicsWebView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_mouseReleaseEvent, "mouseReleaseEvent(self, QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneMouseEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mouseReleaseEvent, doc_QGraphicsWebView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_mouseMoveEvent, "mouseMoveEvent(self, QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneMouseEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mouseMoveEvent, doc_QGraphicsWebView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_hoverMoveEvent, "hoverMoveEvent(self, QGraphicsSceneHoverEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_hoverMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_hoverMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneHoverEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneHoverEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::hoverMoveEvent(a0) : sipCpp->hoverMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_hoverMoveEvent, doc_QGraphicsWebView_hoverMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_hoverLeaveEvent, "hoverLeaveEvent(self, QGraphicsSceneHoverEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_hoverLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_hoverLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneHoverEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneHoverEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::hoverLeaveEvent(a0) : sipCpp->hoverLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_hoverLeaveEvent, doc_QGraphicsWebView_hoverLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_wheelEvent, "wheelEvent(self, QGraphicsSceneWheelEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneWheelEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_wheelEvent, doc_QGraphicsWebView_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_keyPressEvent, doc_QGraphicsWebView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_keyReleaseEvent, doc_QGraphicsWebView_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_contextMenuEvent, "contextMenuEvent(self, QGraphicsSceneContextMenuEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneContextMenuEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_contextMenuEvent, doc_QGraphicsWebView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_dragEnterEvent, "dragEnterEvent(self, QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneDragDropEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dragEnterEvent, doc_QGraphicsWebView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_dragLeaveEvent, "dragLeaveEvent(self, QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneDragDropEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dragLeaveEvent, doc_QGraphicsWebView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_dragMoveEvent, "dragMoveEvent(self, QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneDragDropEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dragMoveEvent, doc_QGraphicsWebView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_dropEvent, "dropEvent(self, QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsSceneDragDropEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dropEvent, doc_QGraphicsWebView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_focusInEvent, doc_QGraphicsWebView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_focusOutEvent, doc_QGraphicsWebView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_inputMethodEvent, doc_QGraphicsWebView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_focusNextPrevChild, doc_QGraphicsWebView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_sceneEvent, "sceneEvent(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_sceneEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_sceneEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QGraphicsWebView::sceneEvent(a0) : sipCpp->sceneEvent(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_sceneEvent, doc_QGraphicsWebView_sceneEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_resizesToContents, "resizesToContents(self) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_resizesToContents(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_resizesToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resizesToContents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_resizesToContents, doc_QGraphicsWebView_resizesToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setResizesToContents, "setResizesToContents(self, bool)");

extern "C" {static PyObject *meth_QGraphicsWebView_setResizesToContents(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setResizesToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResizesToContents(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setResizesToContents, doc_QGraphicsWebView_setResizesToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_isTiledBackingStoreFrozen, "isTiledBackingStoreFrozen(self) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_isTiledBackingStoreFrozen(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_isTiledBackingStoreFrozen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isTiledBackingStoreFrozen();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_isTiledBackingStoreFrozen, doc_QGraphicsWebView_isTiledBackingStoreFrozen);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setTiledBackingStoreFrozen, "setTiledBackingStoreFrozen(self, bool)");

extern "C" {static PyObject *meth_QGraphicsWebView_setTiledBackingStoreFrozen(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setTiledBackingStoreFrozen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTiledBackingStoreFrozen(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setTiledBackingStoreFrozen, doc_QGraphicsWebView_setTiledBackingStoreFrozen);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_renderHints, "renderHints(self) -> QPainter.RenderHints");

extern "C" {static PyObject *meth_QGraphicsWebView_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
             ::QPainter::RenderHints*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPainter::RenderHints(sipCpp->renderHints());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_renderHints, doc_QGraphicsWebView_renderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setRenderHints, "setRenderHints(self, QPainter.RenderHints)");

extern "C" {static PyObject *meth_QGraphicsWebView_setRenderHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setRenderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPainter::RenderHints* a0;
        int a0State = 0;
         ::QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QPainter_RenderHints, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHints(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setRenderHints, doc_QGraphicsWebView_setRenderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setRenderHint, "setRenderHint(self, QPainter.RenderHint, enabled: bool = True)");

extern "C" {static PyObject *meth_QGraphicsWebView_setRenderHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setRenderHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPainter::RenderHint a0;
        bool a1 = 1;
         ::QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QPainter_RenderHint, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHint(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setRenderHint, doc_QGraphicsWebView_setRenderHint);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGraphicsWebView(void *, const sipTypeDef *);}
static void *cast_QGraphicsWebView(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGraphicsWebView *sipCpp = reinterpret_cast< ::QGraphicsWebView *>(sipCppV);

    if (targetType == sipType_QGraphicsWidget)
        return static_cast< ::QGraphicsWidget *>(sipCpp);

    if (targetType == sipType_QGraphicsObject)
        return static_cast< ::QGraphicsObject *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QGraphicsItem)
        return static_cast< ::QGraphicsItem *>(sipCpp);

    if (targetType == sipType_QGraphicsLayoutItem)
        return static_cast< ::QGraphicsLayoutItem *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsWebView(void *, int);}
static void release_QGraphicsWebView(void *sipCppV, int)
{
     ::QGraphicsWebView *sipCpp = reinterpret_cast< ::QGraphicsWebView *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGraphicsWebView(sipSimpleWrapper *);}
static void dealloc_QGraphicsWebView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGraphicsWebView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGraphicsWebView(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGraphicsWebView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsWebView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsWebView *sipCpp = 0;

    {
         ::QGraphicsItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QGraphicsItem, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsWebView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsWebView[] = {{21, 2, 1}};


static PyMethodDef methods_QGraphicsWebView[] = {
    {SIP_MLNAME_CAST(sipName_back), meth_QGraphicsWebView_back, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_back)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QGraphicsWebView_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QGraphicsWebView_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QGraphicsWebView_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QGraphicsWebView_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QGraphicsWebView_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QGraphicsWebView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_event)},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QGraphicsWebView_findText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_findText)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QGraphicsWebView_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QGraphicsWebView_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QGraphicsWebView_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_forward), meth_QGraphicsWebView_forward, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_forward)},
    {SIP_MLNAME_CAST(sipName_history), meth_QGraphicsWebView_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_history)},
    {SIP_MLNAME_CAST(sipName_hoverLeaveEvent), meth_QGraphicsWebView_hoverLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_hoverLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_hoverMoveEvent), meth_QGraphicsWebView_hoverMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_hoverMoveEvent)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QGraphicsWebView_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_icon)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QGraphicsWebView_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QGraphicsWebView_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QGraphicsWebView_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_isModified)},
    {SIP_MLNAME_CAST(sipName_isTiledBackingStoreFrozen), meth_QGraphicsWebView_isTiledBackingStoreFrozen, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_isTiledBackingStoreFrozen)},
    {SIP_MLNAME_CAST(sipName_itemChange), meth_QGraphicsWebView_itemChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_itemChange)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QGraphicsWebView_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QGraphicsWebView_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QGraphicsWebView_load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_load)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QGraphicsWebView_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QGraphicsWebView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QGraphicsWebView_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QGraphicsWebView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_page), meth_QGraphicsWebView_page, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_page)},
    {SIP_MLNAME_CAST(sipName_pageAction), meth_QGraphicsWebView_pageAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_pageAction)},
    {SIP_MLNAME_CAST(sipName_paint), (PyCFunction)meth_QGraphicsWebView_paint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_paint)},
    {SIP_MLNAME_CAST(sipName_reload), meth_QGraphicsWebView_reload, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_reload)},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QGraphicsWebView_renderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_renderHints)},
    {SIP_MLNAME_CAST(sipName_resizesToContents), meth_QGraphicsWebView_resizesToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_resizesToContents)},
    {SIP_MLNAME_CAST(sipName_sceneEvent), meth_QGraphicsWebView_sceneEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_sceneEvent)},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QGraphicsWebView_setContent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setContent)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QGraphicsWebView_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setHtml), (PyCFunction)meth_QGraphicsWebView_setHtml, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setHtml)},
    {SIP_MLNAME_CAST(sipName_setPage), meth_QGraphicsWebView_setPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setPage)},
    {SIP_MLNAME_CAST(sipName_setRenderHint), (PyCFunction)meth_QGraphicsWebView_setRenderHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setRenderHint)},
    {SIP_MLNAME_CAST(sipName_setRenderHints), meth_QGraphicsWebView_setRenderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setRenderHints)},
    {SIP_MLNAME_CAST(sipName_setResizesToContents), meth_QGraphicsWebView_setResizesToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setResizesToContents)},
    {SIP_MLNAME_CAST(sipName_setTiledBackingStoreFrozen), meth_QGraphicsWebView_setTiledBackingStoreFrozen, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setTiledBackingStoreFrozen)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QGraphicsWebView_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setUrl)},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QGraphicsWebView_setZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setZoomFactor)},
    {SIP_MLNAME_CAST(sipName_settings), meth_QGraphicsWebView_settings, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_settings)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QGraphicsWebView_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_sizeHint)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QGraphicsWebView_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_stop)},
    {SIP_MLNAME_CAST(sipName_title), meth_QGraphicsWebView_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_title)},
    {SIP_MLNAME_CAST(sipName_triggerPageAction), (PyCFunction)meth_QGraphicsWebView_triggerPageAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_triggerPageAction)},
    {SIP_MLNAME_CAST(sipName_updateGeometry), meth_QGraphicsWebView_updateGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_updateGeometry)},
    {SIP_MLNAME_CAST(sipName_url), meth_QGraphicsWebView_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_url)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QGraphicsWebView_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QGraphicsWebView_zoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_zoomFactor)}
};

PyDoc_STRVAR(doc_QGraphicsWebView, "\1QGraphicsWebView(parent: QGraphicsItem = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QGraphicsWebView[] = {
    {"linkClicked(QUrl)", "\1linkClicked(self, QUrl)", 0, 0},
    {"statusBarMessage(QString)", "\1statusBarMessage(self, str)", 0, 0},
    {"iconChanged()", "\1iconChanged(self)", 0, 0},
    {"titleChanged(QString)", "\1titleChanged(self, str)", 0, 0},
    {"urlChanged(QUrl)", "\1urlChanged(self, QUrl)", 0, 0},
    {"loadProgress(int)", "\1loadProgress(self, int)", 0, 0},
    {"loadFinished(bool)", "\1loadFinished(self, bool)", 0, 0},
    {"loadStarted()", "\1loadStarted(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QGraphicsWebView = {
    & ::QGraphicsWebView::staticMetaObject,
    0,
    signals_QGraphicsWebView
};


sipClassTypeDef sipTypeDef_QtWebKit_QGraphicsWebView = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsWebView,
        {0},
        &plugin_QGraphicsWebView
    },
    {
        sipNameNr_QGraphicsWebView,
        {0, 0, 1},
        54, methods_QGraphicsWebView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsWebView,
    -1,
    -1,
    supers_QGraphicsWebView,
    0,
    init_type_QGraphicsWebView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsWebView,
    0,
    0,
    0,
    release_QGraphicsWebView,
    cast_QGraphicsWebView,
    0,
    0,
    0,
    0,
    0,
    0
};
