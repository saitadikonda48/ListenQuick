/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 29 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSettings.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSettings.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 36 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSettings.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSettings.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 42 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebSettings.cpp"


PyDoc_STRVAR(doc_QWebSettings_globalSettings, "globalSettings() -> QWebSettings");

extern "C" {static PyObject *meth_QWebSettings_globalSettings(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_globalSettings(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QWebSettings*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QWebSettings::globalSettings();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_globalSettings, doc_QWebSettings_globalSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setFontFamily, "setFontFamily(self, QWebSettings.FontFamily, str)");

extern "C" {static PyObject *meth_QWebSettings_setFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::FontFamily a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QWebSettings_FontFamily, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontFamily(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setFontFamily, doc_QWebSettings_setFontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_fontFamily, "fontFamily(self, QWebSettings.FontFamily) -> str");

extern "C" {static PyObject *meth_QWebSettings_fontFamily(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_fontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::FontFamily a0;
        const  ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QWebSettings_FontFamily, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->fontFamily(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_fontFamily, doc_QWebSettings_fontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_resetFontFamily, "resetFontFamily(self, QWebSettings.FontFamily)");

extern "C" {static PyObject *meth_QWebSettings_resetFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_resetFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::FontFamily a0;
         ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QWebSettings_FontFamily, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetFontFamily(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_resetFontFamily, doc_QWebSettings_resetFontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setFontSize, "setFontSize(self, QWebSettings.FontSize, int)");

extern "C" {static PyObject *meth_QWebSettings_setFontSize(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setFontSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::FontSize a0;
        int a1;
         ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEi", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QWebSettings_FontSize, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontSize(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setFontSize, doc_QWebSettings_setFontSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_fontSize, "fontSize(self, QWebSettings.FontSize) -> int");

extern "C" {static PyObject *meth_QWebSettings_fontSize(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_fontSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::FontSize a0;
        const  ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QWebSettings_FontSize, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontSize(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_fontSize, doc_QWebSettings_fontSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_resetFontSize, "resetFontSize(self, QWebSettings.FontSize)");

extern "C" {static PyObject *meth_QWebSettings_resetFontSize(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_resetFontSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::FontSize a0;
         ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QWebSettings_FontSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetFontSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_resetFontSize, doc_QWebSettings_resetFontSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setAttribute, "setAttribute(self, QWebSettings.WebAttribute, bool)");

extern "C" {static PyObject *meth_QWebSettings_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::WebAttribute a0;
        bool a1;
         ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEb", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QWebSettings_WebAttribute, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttribute(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setAttribute, doc_QWebSettings_setAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_testAttribute, "testAttribute(self, QWebSettings.WebAttribute) -> bool");

extern "C" {static PyObject *meth_QWebSettings_testAttribute(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_testAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::WebAttribute a0;
        const  ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QWebSettings_WebAttribute, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->testAttribute(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_testAttribute, doc_QWebSettings_testAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_resetAttribute, "resetAttribute(self, QWebSettings.WebAttribute)");

extern "C" {static PyObject *meth_QWebSettings_resetAttribute(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_resetAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::WebAttribute a0;
         ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QWebSettings_WebAttribute, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetAttribute(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_resetAttribute, doc_QWebSettings_resetAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setUserStyleSheetUrl, "setUserStyleSheetUrl(self, QUrl)");

extern "C" {static PyObject *meth_QWebSettings_setUserStyleSheetUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setUserStyleSheetUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUserStyleSheetUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setUserStyleSheetUrl, doc_QWebSettings_setUserStyleSheetUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_userStyleSheetUrl, "userStyleSheetUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebSettings_userStyleSheetUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_userStyleSheetUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSettings, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->userStyleSheetUrl());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_userStyleSheetUrl, doc_QWebSettings_userStyleSheetUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setIconDatabasePath, "setIconDatabasePath(str)");

extern "C" {static PyObject *meth_QWebSettings_setIconDatabasePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setIconDatabasePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::setIconDatabasePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setIconDatabasePath, doc_QWebSettings_setIconDatabasePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_iconDatabasePath, "iconDatabasePath() -> str");

extern "C" {static PyObject *meth_QWebSettings_iconDatabasePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_iconDatabasePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QWebSettings::iconDatabasePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_iconDatabasePath, doc_QWebSettings_iconDatabasePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_clearIconDatabase, "clearIconDatabase()");

extern "C" {static PyObject *meth_QWebSettings_clearIconDatabase(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_clearIconDatabase(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::clearIconDatabase();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_clearIconDatabase, doc_QWebSettings_clearIconDatabase);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_iconForUrl, "iconForUrl(QUrl) -> QIcon");

extern "C" {static PyObject *meth_QWebSettings_iconForUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_iconForUrl(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QUrl, &a0))
        {
             ::QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QIcon( ::QWebSettings::iconForUrl(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_iconForUrl, doc_QWebSettings_iconForUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setWebGraphic, "setWebGraphic(QWebSettings.WebGraphic, QPixmap)");

extern "C" {static PyObject *meth_QWebSettings_setWebGraphic(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setWebGraphic(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::WebGraphic a0;
        const  ::QPixmap* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "EJ9", sipType_QWebSettings_WebGraphic, &a0, sipType_QPixmap, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::setWebGraphic(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setWebGraphic, doc_QWebSettings_setWebGraphic);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_webGraphic, "webGraphic(QWebSettings.WebGraphic) -> QPixmap");

extern "C" {static PyObject *meth_QWebSettings_webGraphic(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_webGraphic(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebSettings::WebGraphic a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QWebSettings_WebGraphic, &a0))
        {
             ::QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPixmap( ::QWebSettings::webGraphic(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_webGraphic, doc_QWebSettings_webGraphic);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setMaximumPagesInCache, "setMaximumPagesInCache(int)");

extern "C" {static PyObject *meth_QWebSettings_setMaximumPagesInCache(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setMaximumPagesInCache(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::setMaximumPagesInCache(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setMaximumPagesInCache, doc_QWebSettings_setMaximumPagesInCache);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_maximumPagesInCache, "maximumPagesInCache() -> int");

extern "C" {static PyObject *meth_QWebSettings_maximumPagesInCache(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_maximumPagesInCache(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QWebSettings::maximumPagesInCache();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_maximumPagesInCache, doc_QWebSettings_maximumPagesInCache);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setObjectCacheCapacities, "setObjectCacheCapacities(int, int, int)");

extern "C" {static PyObject *meth_QWebSettings_setObjectCacheCapacities(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setObjectCacheCapacities(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "iii", &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::setObjectCacheCapacities(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setObjectCacheCapacities, doc_QWebSettings_setObjectCacheCapacities);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setOfflineStoragePath, "setOfflineStoragePath(str)");

extern "C" {static PyObject *meth_QWebSettings_setOfflineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setOfflineStoragePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::setOfflineStoragePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setOfflineStoragePath, doc_QWebSettings_setOfflineStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_offlineStoragePath, "offlineStoragePath() -> str");

extern "C" {static PyObject *meth_QWebSettings_offlineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_offlineStoragePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QWebSettings::offlineStoragePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_offlineStoragePath, doc_QWebSettings_offlineStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setOfflineStorageDefaultQuota, "setOfflineStorageDefaultQuota(int)");

extern "C" {static PyObject *meth_QWebSettings_setOfflineStorageDefaultQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setOfflineStorageDefaultQuota(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint64 a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "n", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::setOfflineStorageDefaultQuota(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setOfflineStorageDefaultQuota, doc_QWebSettings_setOfflineStorageDefaultQuota);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_offlineStorageDefaultQuota, "offlineStorageDefaultQuota() -> int");

extern "C" {static PyObject *meth_QWebSettings_offlineStorageDefaultQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_offlineStorageDefaultQuota(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QWebSettings::offlineStorageDefaultQuota();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_offlineStorageDefaultQuota, doc_QWebSettings_offlineStorageDefaultQuota);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setDefaultTextEncoding, "setDefaultTextEncoding(self, str)");

extern "C" {static PyObject *meth_QWebSettings_setDefaultTextEncoding(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setDefaultTextEncoding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultTextEncoding(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setDefaultTextEncoding, doc_QWebSettings_setDefaultTextEncoding);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_defaultTextEncoding, "defaultTextEncoding(self) -> str");

extern "C" {static PyObject *meth_QWebSettings_defaultTextEncoding(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_defaultTextEncoding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSettings, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->defaultTextEncoding());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_defaultTextEncoding, doc_QWebSettings_defaultTextEncoding);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setOfflineWebApplicationCachePath, "setOfflineWebApplicationCachePath(str)");

extern "C" {static PyObject *meth_QWebSettings_setOfflineWebApplicationCachePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setOfflineWebApplicationCachePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::setOfflineWebApplicationCachePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setOfflineWebApplicationCachePath, doc_QWebSettings_setOfflineWebApplicationCachePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_offlineWebApplicationCachePath, "offlineWebApplicationCachePath() -> str");

extern "C" {static PyObject *meth_QWebSettings_offlineWebApplicationCachePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_offlineWebApplicationCachePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QWebSettings::offlineWebApplicationCachePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_offlineWebApplicationCachePath, doc_QWebSettings_offlineWebApplicationCachePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setOfflineWebApplicationCacheQuota, "setOfflineWebApplicationCacheQuota(int)");

extern "C" {static PyObject *meth_QWebSettings_setOfflineWebApplicationCacheQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setOfflineWebApplicationCacheQuota(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint64 a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "n", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::setOfflineWebApplicationCacheQuota(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setOfflineWebApplicationCacheQuota, doc_QWebSettings_setOfflineWebApplicationCacheQuota);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_offlineWebApplicationCacheQuota, "offlineWebApplicationCacheQuota() -> int");

extern "C" {static PyObject *meth_QWebSettings_offlineWebApplicationCacheQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_offlineWebApplicationCacheQuota(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QWebSettings::offlineWebApplicationCacheQuota();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_offlineWebApplicationCacheQuota, doc_QWebSettings_offlineWebApplicationCacheQuota);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_setLocalStoragePath, "setLocalStoragePath(self, str)");

extern "C" {static PyObject *meth_QWebSettings_setLocalStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setLocalStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLocalStoragePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_setLocalStoragePath, doc_QWebSettings_setLocalStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_localStoragePath, "localStoragePath(self) -> str");

extern "C" {static PyObject *meth_QWebSettings_localStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_localStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSettings, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->localStoragePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_localStoragePath, doc_QWebSettings_localStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_clearMemoryCaches, "clearMemoryCaches()");

extern "C" {static PyObject *meth_QWebSettings_clearMemoryCaches(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_clearMemoryCaches(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::clearMemoryCaches();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_clearMemoryCaches, doc_QWebSettings_clearMemoryCaches);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSettings_enablePersistentStorage, "enablePersistentStorage(path: str = '')");

extern "C" {static PyObject *meth_QWebSettings_enablePersistentStorage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_enablePersistentStorage(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_path,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QWebSettings::enablePersistentStorage(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSettings, sipName_enablePersistentStorage, doc_QWebSettings_enablePersistentStorage);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebSettings(void *, int);}
static void release_QWebSettings(void *, int)
{
}


static PyMethodDef methods_QWebSettings[] = {
    {SIP_MLNAME_CAST(sipName_clearIconDatabase), meth_QWebSettings_clearIconDatabase, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_clearIconDatabase)},
    {SIP_MLNAME_CAST(sipName_clearMemoryCaches), meth_QWebSettings_clearMemoryCaches, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_clearMemoryCaches)},
    {SIP_MLNAME_CAST(sipName_defaultTextEncoding), meth_QWebSettings_defaultTextEncoding, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_defaultTextEncoding)},
    {SIP_MLNAME_CAST(sipName_enablePersistentStorage), (PyCFunction)meth_QWebSettings_enablePersistentStorage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebSettings_enablePersistentStorage)},
    {SIP_MLNAME_CAST(sipName_fontFamily), meth_QWebSettings_fontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_fontFamily)},
    {SIP_MLNAME_CAST(sipName_fontSize), meth_QWebSettings_fontSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_fontSize)},
    {SIP_MLNAME_CAST(sipName_globalSettings), meth_QWebSettings_globalSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_globalSettings)},
    {SIP_MLNAME_CAST(sipName_iconDatabasePath), meth_QWebSettings_iconDatabasePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_iconDatabasePath)},
    {SIP_MLNAME_CAST(sipName_iconForUrl), meth_QWebSettings_iconForUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_iconForUrl)},
    {SIP_MLNAME_CAST(sipName_localStoragePath), meth_QWebSettings_localStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_localStoragePath)},
    {SIP_MLNAME_CAST(sipName_maximumPagesInCache), meth_QWebSettings_maximumPagesInCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_maximumPagesInCache)},
    {SIP_MLNAME_CAST(sipName_offlineStorageDefaultQuota), meth_QWebSettings_offlineStorageDefaultQuota, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_offlineStorageDefaultQuota)},
    {SIP_MLNAME_CAST(sipName_offlineStoragePath), meth_QWebSettings_offlineStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_offlineStoragePath)},
    {SIP_MLNAME_CAST(sipName_offlineWebApplicationCachePath), meth_QWebSettings_offlineWebApplicationCachePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_offlineWebApplicationCachePath)},
    {SIP_MLNAME_CAST(sipName_offlineWebApplicationCacheQuota), meth_QWebSettings_offlineWebApplicationCacheQuota, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_offlineWebApplicationCacheQuota)},
    {SIP_MLNAME_CAST(sipName_resetAttribute), meth_QWebSettings_resetAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_resetAttribute)},
    {SIP_MLNAME_CAST(sipName_resetFontFamily), meth_QWebSettings_resetFontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_resetFontFamily)},
    {SIP_MLNAME_CAST(sipName_resetFontSize), meth_QWebSettings_resetFontSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_resetFontSize)},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QWebSettings_setAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setDefaultTextEncoding), meth_QWebSettings_setDefaultTextEncoding, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setDefaultTextEncoding)},
    {SIP_MLNAME_CAST(sipName_setFontFamily), meth_QWebSettings_setFontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setFontFamily)},
    {SIP_MLNAME_CAST(sipName_setFontSize), meth_QWebSettings_setFontSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setFontSize)},
    {SIP_MLNAME_CAST(sipName_setIconDatabasePath), meth_QWebSettings_setIconDatabasePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setIconDatabasePath)},
    {SIP_MLNAME_CAST(sipName_setLocalStoragePath), meth_QWebSettings_setLocalStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setLocalStoragePath)},
    {SIP_MLNAME_CAST(sipName_setMaximumPagesInCache), meth_QWebSettings_setMaximumPagesInCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setMaximumPagesInCache)},
    {SIP_MLNAME_CAST(sipName_setObjectCacheCapacities), meth_QWebSettings_setObjectCacheCapacities, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setObjectCacheCapacities)},
    {SIP_MLNAME_CAST(sipName_setOfflineStorageDefaultQuota), meth_QWebSettings_setOfflineStorageDefaultQuota, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setOfflineStorageDefaultQuota)},
    {SIP_MLNAME_CAST(sipName_setOfflineStoragePath), meth_QWebSettings_setOfflineStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setOfflineStoragePath)},
    {SIP_MLNAME_CAST(sipName_setOfflineWebApplicationCachePath), meth_QWebSettings_setOfflineWebApplicationCachePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setOfflineWebApplicationCachePath)},
    {SIP_MLNAME_CAST(sipName_setOfflineWebApplicationCacheQuota), meth_QWebSettings_setOfflineWebApplicationCacheQuota, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setOfflineWebApplicationCacheQuota)},
    {SIP_MLNAME_CAST(sipName_setUserStyleSheetUrl), meth_QWebSettings_setUserStyleSheetUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setUserStyleSheetUrl)},
    {SIP_MLNAME_CAST(sipName_setWebGraphic), meth_QWebSettings_setWebGraphic, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_setWebGraphic)},
    {SIP_MLNAME_CAST(sipName_testAttribute), meth_QWebSettings_testAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_testAttribute)},
    {SIP_MLNAME_CAST(sipName_userStyleSheetUrl), meth_QWebSettings_userStyleSheetUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_userStyleSheetUrl)},
    {SIP_MLNAME_CAST(sipName_webGraphic), meth_QWebSettings_webGraphic, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSettings_webGraphic)}
};

static sipEnumMemberDef enummembers_QWebSettings[] = {
    {sipName_AcceleratedCompositingEnabled, static_cast<int>( ::QWebSettings::AcceleratedCompositingEnabled), 48},
    {sipName_AutoLoadImages, static_cast<int>( ::QWebSettings::AutoLoadImages), 48},
    {sipName_CursiveFont, static_cast<int>( ::QWebSettings::CursiveFont), 46},
    {sipName_DefaultFixedFontSize, static_cast<int>( ::QWebSettings::DefaultFixedFontSize), 47},
    {sipName_DefaultFontSize, static_cast<int>( ::QWebSettings::DefaultFontSize), 47},
    {sipName_DefaultFrameIconGraphic, static_cast<int>( ::QWebSettings::DefaultFrameIconGraphic), 49},
    {sipName_DeveloperExtrasEnabled, static_cast<int>( ::QWebSettings::DeveloperExtrasEnabled), 48},
    {sipName_DnsPrefetchEnabled, static_cast<int>( ::QWebSettings::DnsPrefetchEnabled), 48},
    {sipName_FantasyFont, static_cast<int>( ::QWebSettings::FantasyFont), 46},
    {sipName_FixedFont, static_cast<int>( ::QWebSettings::FixedFont), 46},
    {sipName_FrameFlatteningEnabled, static_cast<int>( ::QWebSettings::FrameFlatteningEnabled), 48},
    {sipName_HyperlinkAuditingEnabled, static_cast<int>( ::QWebSettings::HyperlinkAuditingEnabled), 48},
    {sipName_InputSpeechButtonGraphic, static_cast<int>( ::QWebSettings::InputSpeechButtonGraphic), 49},
    {sipName_JavaEnabled, static_cast<int>( ::QWebSettings::JavaEnabled), 48},
    {sipName_JavascriptCanAccessClipboard, static_cast<int>( ::QWebSettings::JavascriptCanAccessClipboard), 48},
    {sipName_JavascriptCanCloseWindows, static_cast<int>( ::QWebSettings::JavascriptCanCloseWindows), 48},
    {sipName_JavascriptCanOpenWindows, static_cast<int>( ::QWebSettings::JavascriptCanOpenWindows), 48},
    {sipName_JavascriptEnabled, static_cast<int>( ::QWebSettings::JavascriptEnabled), 48},
    {sipName_LinksIncludedInFocusChain, static_cast<int>( ::QWebSettings::LinksIncludedInFocusChain), 48},
    {sipName_LocalContentCanAccessFileUrls, static_cast<int>( ::QWebSettings::LocalContentCanAccessFileUrls), 48},
    {sipName_LocalContentCanAccessRemoteUrls, static_cast<int>( ::QWebSettings::LocalContentCanAccessRemoteUrls), 48},
    {sipName_LocalStorageDatabaseEnabled, static_cast<int>( ::QWebSettings::LocalStorageDatabaseEnabled), 48},
    {sipName_LocalStorageEnabled, static_cast<int>( ::QWebSettings::LocalStorageEnabled), 48},
    {sipName_MinimumFontSize, static_cast<int>( ::QWebSettings::MinimumFontSize), 47},
    {sipName_MinimumLogicalFontSize, static_cast<int>( ::QWebSettings::MinimumLogicalFontSize), 47},
    {sipName_MissingImageGraphic, static_cast<int>( ::QWebSettings::MissingImageGraphic), 49},
    {sipName_MissingPluginGraphic, static_cast<int>( ::QWebSettings::MissingPluginGraphic), 49},
    {sipName_OfflineStorageDatabaseEnabled, static_cast<int>( ::QWebSettings::OfflineStorageDatabaseEnabled), 48},
    {sipName_OfflineWebApplicationCacheEnabled, static_cast<int>( ::QWebSettings::OfflineWebApplicationCacheEnabled), 48},
    {sipName_PluginsEnabled, static_cast<int>( ::QWebSettings::PluginsEnabled), 48},
    {sipName_PrintElementBackgrounds, static_cast<int>( ::QWebSettings::PrintElementBackgrounds), 48},
    {sipName_PrivateBrowsingEnabled, static_cast<int>( ::QWebSettings::PrivateBrowsingEnabled), 48},
    {sipName_SansSerifFont, static_cast<int>( ::QWebSettings::SansSerifFont), 46},
    {sipName_SearchCancelButtonGraphic, static_cast<int>( ::QWebSettings::SearchCancelButtonGraphic), 49},
    {sipName_SearchCancelButtonPressedGraphic, static_cast<int>( ::QWebSettings::SearchCancelButtonPressedGraphic), 49},
    {sipName_SerifFont, static_cast<int>( ::QWebSettings::SerifFont), 46},
    {sipName_SiteSpecificQuirksEnabled, static_cast<int>( ::QWebSettings::SiteSpecificQuirksEnabled), 48},
    {sipName_SpatialNavigationEnabled, static_cast<int>( ::QWebSettings::SpatialNavigationEnabled), 48},
    {sipName_StandardFont, static_cast<int>( ::QWebSettings::StandardFont), 46},
    {sipName_TextAreaSizeGripCornerGraphic, static_cast<int>( ::QWebSettings::TextAreaSizeGripCornerGraphic), 49},
    {sipName_TiledBackingStoreEnabled, static_cast<int>( ::QWebSettings::TiledBackingStoreEnabled), 48},
    {sipName_WebGLEnabled, static_cast<int>( ::QWebSettings::WebGLEnabled), 48},
    {sipName_XSSAuditingEnabled, static_cast<int>( ::QWebSettings::XSSAuditingEnabled), 48},
    {sipName_ZoomTextOnly, static_cast<int>( ::QWebSettings::ZoomTextOnly), 48},
};


static pyqt4ClassPluginDef plugin_QWebSettings = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtWebKit_QWebSettings = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QWebSettings,
        {0},
        &plugin_QWebSettings
    },
    {
        sipNameNr_QWebSettings,
        {0, 0, 1},
        35, methods_QWebSettings,
        44, enummembers_QWebSettings,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QWebSettings,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
