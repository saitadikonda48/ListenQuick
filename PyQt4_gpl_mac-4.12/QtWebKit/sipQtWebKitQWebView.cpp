/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebview.sip"
#include <qwebview.h>
#line 29 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"

#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 42 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 647 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 505 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 739 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 765 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 792 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 781 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 474 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 347 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 618 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 252 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 524 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 84 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 87 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 210 "sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 90 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 93 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 96 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 99 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 105 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 108 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 111 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 56 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 114 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 117 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 120 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 123 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 126 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 129 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 132 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 135 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 138 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 141 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 144 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 147 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 150 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 153 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 156 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 159 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 162 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 165 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 168 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 171 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 607 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 596 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 854 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 574 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 548 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 192 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 195 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 198 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 201 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 204 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 207 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 210 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 213 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 216 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 219 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 222 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 225 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 228 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 231 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 234 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 237 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 240 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 243 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebView.cpp"


class sipQWebView : public  ::QWebView
{
public:
    sipQWebView( ::QWidget*);
    virtual ~sipQWebView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QWebView* createWindow( ::QWebPage::WebWindowType);
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const  ::QPalette&);
    void fontChange(const  ::QFont&);
    void windowActivationChange(bool);
    void languageChange();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebView(const sipQWebView &);
    sipQWebView &operator = (const sipQWebView &);

    char sipPyMethods[48];
};

sipQWebView::sipQWebView( ::QWidget*a0):  ::QWebView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebView::~sipQWebView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebView::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QWebView);
}

int sipQWebView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QWebView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QWebView,_c,_id,_a);

    return _id;
}

void *sipQWebView::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast(sipPySelf, sipType_QWebView, _clname)) ? this :  ::QWebView::qt_metacast(_clname);
}

 ::QWebView* sipQWebView::createWindow( ::QWebPage::WebWindowType a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_createWindow);

    if (!sipMeth)
        return  ::QWebView::createWindow(a0);

    extern  ::QWebView* sipVH_QtWebKit_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebPage::WebWindowType);

    return sipVH_QtWebKit_76(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QWebView::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWebKit_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtWebKit_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QWebView::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWebKit_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtWebKit_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QWebView::customEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QWebView::childEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWebKit_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QWebView::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWebKit_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebView::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QWebView::eventFilter(a0,a1);

    extern bool sipVH_QtWebKit_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWebKit_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQWebView::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QWebView::event(a0);

    extern bool sipVH_QtWebKit_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWebKit_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQWebView::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QWebView::metric(a0);

    extern int sipVH_QtWebKit_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtWebKit_58(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQWebView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QWebView::paintEngine();

    extern  ::QPaintEngine* sipVH_QtWebKit_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_57(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQWebView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QWebView::devType();

    extern int sipVH_QtWebKit_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_30(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQWebView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QWebView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWebKit_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWebKit_40(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQWebView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QWebView::sizeHint();

    extern  ::QSize sipVH_QtWebKit_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_56(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQWebView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QWebView::minimumSizeHint();

    extern  ::QSize sipVH_QtWebKit_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_56(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQWebView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QWebView::heightForWidth(a0);

    extern int sipVH_QtWebKit_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWebKit_55(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QWebView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWebKit_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QWebView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWebKit_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QWebView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWebKit_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QWebView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtWebKit_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QWebView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtWebKit_53(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QWebView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWebKit_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QWebView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtWebKit_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QWebView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWebKit_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QWebView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtWebKit_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QWebView::enterEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QWebView::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QWebView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtWebKit_52(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QWebView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtWebKit_51(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QWebView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtWebKit_50(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QWebView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtWebKit_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QWebView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtWebKit_49(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QWebView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtWebKit_48(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QWebView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtWebKit_47(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QWebView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtWebKit_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QWebView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtWebKit_45(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QWebView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtWebKit_44(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QWebView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtWebKit_43(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QWebView::showEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtWebKit_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QWebView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtWebKit_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QWebView::changeEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QWebView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtWebKit_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQWebView::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QWebView::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtWebKit_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtWebKit_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QWebView::focusNextPrevChild(a0);

    extern bool sipVH_QtWebKit_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWebKit_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::QWebView::enabledChange(a0);
        return;
    }

    extern void sipVH_QtWebKit_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWebKit_40(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::QWebView::paletteChange(a0);
        return;
    }

    extern void sipVH_QtWebKit_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_QtWebKit_42(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::QWebView::fontChange(a0);
        return;
    }

    extern void sipVH_QtWebKit_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_QtWebKit_41(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::QWebView::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtWebKit_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWebKit_40(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::QWebView::languageChange();
        return;
    }

    extern void sipVH_QtWebKit_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWebKit_3(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QWebView_page, "page(self) -> QWebPage");

extern "C" {static PyObject *meth_QWebView_page(PyObject *, PyObject *);}
static PyObject *meth_QWebView_page(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::QWebPage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->page();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_page, doc_QWebView_page);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setPage, "setPage(self, QWebPage)");

extern "C" {static PyObject *meth_QWebView_setPage(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPage* a0;
        PyObject *a0Keep;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebView, &sipCpp, &a0Keep, sipType_QWebPage, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPage(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -7, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setPage, doc_QWebView_setPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_load, "load(self, QUrl)\n"
    "load(self, QNetworkRequest, operation: QNetworkAccessManager.Operation = QNetworkAccessManager.GetOperation, body: Union[QByteArray, bytes, bytearray] = QByteArray())");

extern "C" {static PyObject *meth_QWebView_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QNetworkRequest* a0;
         ::QNetworkAccessManager::Operation a1 = QNetworkAccessManager::GetOperation;
        const  ::QByteArray& a2def = QByteArray();
        const  ::QByteArray* a2 = &a2def;
        int a2State = 0;
         ::QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
            sipName_body,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EJ1", &sipSelf, sipType_QWebView, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QNetworkAccessManager_Operation, &a1, sipType_QByteArray, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a2),sipType_QByteArray,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_load, doc_QWebView_load);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setHtml, "setHtml(self, str, baseUrl: QUrl = QUrl())");

extern "C" {static PyObject *meth_QWebView_setHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_setHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrl& a1def = QUrl();
        const  ::QUrl* a1 = &a1def;
         ::QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHtml(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setHtml, doc_QWebView_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setContent, "setContent(self, Union[QByteArray, bytes, bytearray], mimeType: str = '', baseUrl: QUrl = QUrl())");

extern "C" {static PyObject *meth_QWebView_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QUrl& a2def = QUrl();
        const  ::QUrl* a2 = &a2def;
         ::QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContent(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setContent, doc_QWebView_setContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_history, "history(self) -> QWebHistory");

extern "C" {static PyObject *meth_QWebView_history(PyObject *, PyObject *);}
static PyObject *meth_QWebView_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::QWebHistory*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->history();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_history, doc_QWebView_history);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_settings, "settings(self) -> QWebSettings");

extern "C" {static PyObject *meth_QWebView_settings(PyObject *, PyObject *);}
static PyObject *meth_QWebView_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::QWebSettings*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->settings();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_settings, doc_QWebView_settings);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_title, "title(self) -> str");

extern "C" {static PyObject *meth_QWebView_title(PyObject *, PyObject *);}
static PyObject *meth_QWebView_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->title());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_title, doc_QWebView_title);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QWebView_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setUrl, doc_QWebView_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QWebView_url(PyObject *, PyObject *);}
static PyObject *meth_QWebView_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_url, doc_QWebView_url);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QWebView_icon(PyObject *, PyObject *);}
static PyObject *meth_QWebView_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_icon, doc_QWebView_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_selectedText, "selectedText(self) -> str");

extern "C" {static PyObject *meth_QWebView_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QWebView_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->selectedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_selectedText, doc_QWebView_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_pageAction, "pageAction(self, QWebPage.WebAction) -> QAction");

extern "C" {static PyObject *meth_QWebView_pageAction(PyObject *, PyObject *);}
static PyObject *meth_QWebView_pageAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPage::WebAction a0;
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWebPage_WebAction, &a0))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pageAction(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_pageAction, doc_QWebView_pageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_triggerPageAction, "triggerPageAction(self, QWebPage.WebAction, checked: bool = False)");

extern "C" {static PyObject *meth_QWebView_triggerPageAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_triggerPageAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebPage::WebAction a0;
        bool a1 = 0;
         ::QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWebPage_WebAction, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->triggerPageAction(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_triggerPageAction, doc_QWebView_triggerPageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_isModified, "isModified(self) -> bool");

extern "C" {static PyObject *meth_QWebView_isModified(PyObject *, PyObject *);}
static PyObject *meth_QWebView_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isModified();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_isModified, doc_QWebView_isModified);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any");

extern "C" {static PyObject *meth_QWebView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QWebView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QWebView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_inputMethodQuery, doc_QWebView_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QWebView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QWebView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QWebView::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_sizeHint, doc_QWebView_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setTextSizeMultiplier, "setTextSizeMultiplier(self, float)");

extern "C" {static PyObject *meth_QWebView_setTextSizeMultiplier(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setTextSizeMultiplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextSizeMultiplier(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setTextSizeMultiplier, doc_QWebView_setTextSizeMultiplier);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_textSizeMultiplier, "textSizeMultiplier(self) -> float");

extern "C" {static PyObject *meth_QWebView_textSizeMultiplier(PyObject *, PyObject *);}
static PyObject *meth_QWebView_textSizeMultiplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textSizeMultiplier();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_textSizeMultiplier, doc_QWebView_textSizeMultiplier);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_findText, "findText(self, str, options: QWebPage.FindFlags = 0) -> bool");

extern "C" {static PyObject *meth_QWebView_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebPage::FindFlags a1def = 0;
         ::QWebPage::FindFlags* a1 = &a1def;
        int a1State = 0;
         ::QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebPage_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->findText(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebPage_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_findText, doc_QWebView_findText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QWebView_event(PyObject *, PyObject *);}
static PyObject *meth_QWebView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebView::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_event, doc_QWebView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_stop, "stop(self)");

extern "C" {static PyObject *meth_QWebView_stop(PyObject *, PyObject *);}
static PyObject *meth_QWebView_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_stop, doc_QWebView_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_back, "back(self)");

extern "C" {static PyObject *meth_QWebView_back(PyObject *, PyObject *);}
static PyObject *meth_QWebView_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->back();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_back, doc_QWebView_back);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_forward, "forward(self)");

extern "C" {static PyObject *meth_QWebView_forward(PyObject *, PyObject *);}
static PyObject *meth_QWebView_forward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->forward();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_forward, doc_QWebView_forward);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_reload, "reload(self)");

extern "C" {static PyObject *meth_QWebView_reload(PyObject *, PyObject *);}
static PyObject *meth_QWebView_reload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reload();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_reload, doc_QWebView_reload);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_print_, "print_(self, QPrinter)");

extern "C" {static PyObject *meth_QWebView_print_(PyObject *, PyObject *);}
static PyObject *meth_QWebView_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPrinter* a0;
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPrinter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_print_, doc_QWebView_print_);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_createWindow, "createWindow(self, QWebPage.WebWindowType) -> QWebView");

extern "C" {static PyObject *meth_QWebView_createWindow(PyObject *, PyObject *);}
static PyObject *meth_QWebView_createWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebPage::WebWindowType a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWebPage_WebWindowType, &a0))
        {
             ::QWebView*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebView::createWindow(a0) : sipCpp->createWindow(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_createWindow, doc_QWebView_createWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QWebView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_resizeEvent, doc_QWebView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QWebView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_paintEvent, doc_QWebView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QWebView_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_changeEvent, doc_QWebView_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWebView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mouseMoveEvent, doc_QWebView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWebView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mousePressEvent, doc_QWebView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWebView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mouseDoubleClickEvent, doc_QWebView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QWebView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_mouseReleaseEvent, doc_QWebView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QWebView_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_contextMenuEvent, doc_QWebView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QWebView_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_wheelEvent, doc_QWebView_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QWebView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_keyPressEvent, doc_QWebView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QWebView_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_keyReleaseEvent, doc_QWebView_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QWebView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dragEnterEvent, doc_QWebView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QWebView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dragLeaveEvent, doc_QWebView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QWebView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dragMoveEvent, doc_QWebView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QWebView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_dropEvent, doc_QWebView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QWebView_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusInEvent, doc_QWebView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QWebView_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusOutEvent, doc_QWebView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QWebView_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebView::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_inputMethodEvent, doc_QWebView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QWebView_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QWebView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebView::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_focusNextPrevChild, doc_QWebView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_zoomFactor, "zoomFactor(self) -> float");

extern "C" {static PyObject *meth_QWebView_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebView_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->zoomFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_zoomFactor, doc_QWebView_zoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setZoomFactor, "setZoomFactor(self, float)");

extern "C" {static PyObject *meth_QWebView_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setZoomFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setZoomFactor, doc_QWebView_setZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_renderHints, "renderHints(self) -> QPainter.RenderHints");

extern "C" {static PyObject *meth_QWebView_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QWebView_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::QPainter::RenderHints*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPainter::RenderHints(sipCpp->renderHints());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_renderHints, doc_QWebView_renderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setRenderHints, "setRenderHints(self, QPainter.RenderHints)");

extern "C" {static PyObject *meth_QWebView_setRenderHints(PyObject *, PyObject *);}
static PyObject *meth_QWebView_setRenderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPainter::RenderHints* a0;
        int a0State = 0;
         ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPainter_RenderHints, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHints(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setRenderHints, doc_QWebView_setRenderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_setRenderHint, "setRenderHint(self, QPainter.RenderHint, enabled: bool = True)");

extern "C" {static PyObject *meth_QWebView_setRenderHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebView_setRenderHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPainter::RenderHint a0;
        bool a1 = 1;
         ::QWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebView, &sipCpp, sipType_QPainter_RenderHint, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRenderHint(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_setRenderHint, doc_QWebView_setRenderHint);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_hasSelection, "hasSelection(self) -> bool");

extern "C" {static PyObject *meth_QWebView_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QWebView_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasSelection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_hasSelection, doc_QWebView_hasSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QWebView_selectedHtml, "selectedHtml(self) -> str");

extern "C" {static PyObject *meth_QWebView_selectedHtml(PyObject *, PyObject *);}
static PyObject *meth_QWebView_selectedHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebView, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->selectedHtml());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebView, sipName_selectedHtml, doc_QWebView_selectedHtml);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWebView(void *, const sipTypeDef *);}
static void *cast_QWebView(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWebView *sipCpp = reinterpret_cast< ::QWebView *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebView(void *, int);}
static void release_QWebView(void *sipCppV, int)
{
     ::QWebView *sipCpp = reinterpret_cast< ::QWebView *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebView(sipSimpleWrapper *);}
static void dealloc_QWebView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQWebView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWebView(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QWebView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebView *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWebView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebView[] = {{48, 2, 1}};


static PyMethodDef methods_QWebView[] = {
    {SIP_MLNAME_CAST(sipName_back), meth_QWebView_back, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_back)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QWebView_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_changeEvent)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QWebView_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_createWindow), meth_QWebView_createWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_createWindow)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QWebView_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QWebView_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QWebView_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QWebView_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_event)},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QWebView_findText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_findText)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QWebView_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QWebView_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QWebView_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_forward), meth_QWebView_forward, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_forward)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QWebView_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_hasSelection)},
    {SIP_MLNAME_CAST(sipName_history), meth_QWebView_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_history)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWebView_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_icon)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QWebView_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QWebView_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QWebView_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_isModified)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QWebView_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QWebView_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QWebView_load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_load)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QWebView_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QWebView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QWebView_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QWebView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_page), meth_QWebView_page, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_page)},
    {SIP_MLNAME_CAST(sipName_pageAction), meth_QWebView_pageAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_pageAction)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QWebView_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_print_), meth_QWebView_print_, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_print_)},
    {SIP_MLNAME_CAST(sipName_reload), meth_QWebView_reload, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_reload)},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QWebView_renderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_renderHints)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QWebView_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_selectedHtml), meth_QWebView_selectedHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_selectedHtml)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QWebView_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_selectedText)},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QWebView_setContent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_setContent)},
    {SIP_MLNAME_CAST(sipName_setHtml), (PyCFunction)meth_QWebView_setHtml, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_setHtml)},
    {SIP_MLNAME_CAST(sipName_setPage), meth_QWebView_setPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_setPage)},
    {SIP_MLNAME_CAST(sipName_setRenderHint), (PyCFunction)meth_QWebView_setRenderHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_setRenderHint)},
    {SIP_MLNAME_CAST(sipName_setRenderHints), meth_QWebView_setRenderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_setRenderHints)},
    {SIP_MLNAME_CAST(sipName_setTextSizeMultiplier), meth_QWebView_setTextSizeMultiplier, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_setTextSizeMultiplier)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QWebView_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_setUrl)},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QWebView_setZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_setZoomFactor)},
    {SIP_MLNAME_CAST(sipName_settings), meth_QWebView_settings, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_settings)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QWebView_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_sizeHint)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QWebView_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_stop)},
    {SIP_MLNAME_CAST(sipName_textSizeMultiplier), meth_QWebView_textSizeMultiplier, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_textSizeMultiplier)},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebView_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_title)},
    {SIP_MLNAME_CAST(sipName_triggerPageAction), (PyCFunction)meth_QWebView_triggerPageAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebView_triggerPageAction)},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebView_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_url)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QWebView_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QWebView_zoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebView_zoomFactor)}
};

PyDoc_STRVAR(doc_QWebView, "\1QWebView(parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QWebView[] = {
    {"urlChanged(QUrl)", "\1urlChanged(self, QUrl)", 0, 0},
    {"iconChanged()", "\1iconChanged(self)", 0, 0},
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"linkClicked(QUrl)", "\1linkClicked(self, QUrl)", 0, 0},
    {"statusBarMessage(QString)", "\1statusBarMessage(self, str)", 0, 0},
    {"titleChanged(QString)", "\1titleChanged(self, str)", 0, 0},
    {"loadFinished(bool)", "\1loadFinished(self, bool)", 0, 0},
    {"loadProgress(int)", "\1loadProgress(self, int)", 0, 0},
    {"loadStarted()", "\1loadStarted(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QWebView = {
    & ::QWebView::staticMetaObject,
    0,
    signals_QWebView
};


sipClassTypeDef sipTypeDef_QtWebKit_QWebView = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebView,
        {0},
        &plugin_QWebView
    },
    {
        sipNameNr_QWebView,
        {0, 0, 1},
        53, methods_QWebView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebView,
    -1,
    -1,
    supers_QWebView,
    0,
    init_type_QWebView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebView,
    0,
    0,
    0,
    release_QWebView,
    cast_QWebView,
    0,
    0,
    0,
    0,
    0,
    0
};
