/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 29 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 73 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 38 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 80 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 43 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 49 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 52 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 55 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 52 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 60 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 72 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 75 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 84 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 87 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebPluginFactory.cpp"


class sipQWebPluginFactory : public  ::QWebPluginFactory
{
public:
    sipQWebPluginFactory( ::QObject*);
    virtual ~sipQWebPluginFactory();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool supportsExtension( ::QWebPluginFactory::Extension) const;
    bool extension( ::QWebPluginFactory::Extension,const  ::QWebPluginFactory::ExtensionOption*, ::QWebPluginFactory::ExtensionReturn*);
     ::QObject* create(const  ::QString&,const  ::QUrl&,const  ::QStringList&,const  ::QStringList&) const;
    void refreshPlugins();
    QList< ::QWebPluginFactory::Plugin> plugins() const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebPluginFactory(const sipQWebPluginFactory &);
    sipQWebPluginFactory &operator = (const sipQWebPluginFactory &);

    char sipPyMethods[12];
};

sipQWebPluginFactory::sipQWebPluginFactory( ::QObject*a0):  ::QWebPluginFactory(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebPluginFactory::~sipQWebPluginFactory()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebPluginFactory::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QWebPluginFactory);
}

int sipQWebPluginFactory::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QWebPluginFactory::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QWebPluginFactory,_c,_id,_a);

    return _id;
}

void *sipQWebPluginFactory::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast(sipPySelf, sipType_QWebPluginFactory, _clname)) ? this :  ::QWebPluginFactory::qt_metacast(_clname);
}

bool sipQWebPluginFactory::supportsExtension( ::QWebPluginFactory::Extension a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_supportsExtension);

    if (!sipMeth)
        return  ::QWebPluginFactory::supportsExtension(a0);

    extern bool sipVH_QtWebKit_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebPluginFactory::Extension);

    return sipVH_QtWebKit_75(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebPluginFactory::extension( ::QWebPluginFactory::Extension a0,const  ::QWebPluginFactory::ExtensionOption*a1, ::QWebPluginFactory::ExtensionReturn*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_extension);

    if (!sipMeth)
        return  ::QWebPluginFactory::extension(a0,a1,a2);

    extern bool sipVH_QtWebKit_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWebPluginFactory::Extension,const  ::QWebPluginFactory::ExtensionOption*, ::QWebPluginFactory::ExtensionReturn*);

    return sipVH_QtWebKit_74(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QObject* sipQWebPluginFactory::create(const  ::QString& a0,const  ::QUrl& a1,const  ::QStringList& a2,const  ::QStringList& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QWebPluginFactory,sipName_create);

    if (!sipMeth)
        return 0;

    extern  ::QObject* sipVH_QtWebKit_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QUrl&,const  ::QStringList&,const  ::QStringList&);

    return sipVH_QtWebKit_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQWebPluginFactory::refreshPlugins()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_refreshPlugins);

    if (!sipMeth)
    {
         ::QWebPluginFactory::refreshPlugins();
        return;
    }

    extern void sipVH_QtWebKit_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtWebKit_3(sipGILState, 0, sipPySelf, sipMeth);
}

QList< ::QWebPluginFactory::Plugin> sipQWebPluginFactory::plugins() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QWebPluginFactory,sipName_plugins);

    if (!sipMeth)
        return QList< ::QWebPluginFactory::Plugin>();

    extern QList< ::QWebPluginFactory::Plugin> sipVH_QtWebKit_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_72(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQWebPluginFactory::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QWebPluginFactory::event(a0);

    extern bool sipVH_QtWebKit_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtWebKit_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebPluginFactory::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QWebPluginFactory::eventFilter(a0,a1);

    extern bool sipVH_QtWebKit_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtWebKit_18(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQWebPluginFactory::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QWebPluginFactory::timerEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtWebKit_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QWebPluginFactory::childEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtWebKit_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QWebPluginFactory::customEvent(a0);
        return;
    }

    extern void sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtWebKit_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QWebPluginFactory::connectNotify(a0);
        return;
    }

    extern void sipVH_QtWebKit_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtWebKit_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QWebPluginFactory::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtWebKit_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtWebKit_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QWebPluginFactory_plugins, "plugins(self) -> object");

extern "C" {static PyObject *meth_QWebPluginFactory_plugins(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_plugins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            QList< ::QWebPluginFactory::Plugin>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QWebPluginFactory, sipName_plugins);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QWebPluginFactory::Plugin>(sipCpp->plugins());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebPluginFactory_Plugin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_plugins, doc_QWebPluginFactory_plugins);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_refreshPlugins, "refreshPlugins(self)");

extern "C" {static PyObject *meth_QWebPluginFactory_refreshPlugins(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_refreshPlugins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWebPluginFactory::refreshPlugins() : sipCpp->refreshPlugins());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_refreshPlugins, doc_QWebPluginFactory_refreshPlugins);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_create, "create(self, str, QUrl, Sequence[str], Sequence[str]) -> QObject");

extern "C" {static PyObject *meth_QWebPluginFactory_create(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrl* a1;
        const  ::QStringList* a2;
        int a2State = 0;
        const  ::QStringList* a3;
        int a3State = 0;
        const  ::QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9J1J1", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1, sipType_QStringList,&a2, &a2State, sipType_QStringList,&a3, &a3State))
        {
             ::QObject*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QWebPluginFactory, sipName_create);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->create(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a2),sipType_QStringList,a2State);
            sipReleaseType(const_cast< ::QStringList *>(a3),sipType_QStringList,a3State);

            return sipConvertFromNewType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_create, doc_QWebPluginFactory_create);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_extension, "extension(self, QWebPluginFactory.Extension, option: QWebPluginFactory.ExtensionOption = None, output: QWebPluginFactory.ExtensionReturn = None) -> bool");

extern "C" {static PyObject *meth_QWebPluginFactory_extension(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_extension(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebPluginFactory::Extension a0;
        const  ::QWebPluginFactory::ExtensionOption* a1 = 0;
         ::QWebPluginFactory::ExtensionReturn* a2 = 0;
         ::QWebPluginFactory *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_output,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QWebPluginFactory_Extension, &a0, sipType_QWebPluginFactory_ExtensionOption, &a1, sipType_QWebPluginFactory_ExtensionReturn, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPluginFactory::extension(a0,a1,a2) : sipCpp->extension(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_extension, doc_QWebPluginFactory_extension);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_supportsExtension, "supportsExtension(self, QWebPluginFactory.Extension) -> bool");

extern "C" {static PyObject *meth_QWebPluginFactory_supportsExtension(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_supportsExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWebPluginFactory::Extension a0;
        const  ::QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QWebPluginFactory_Extension, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebPluginFactory::supportsExtension(a0) : sipCpp->supportsExtension(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_supportsExtension, doc_QWebPluginFactory_supportsExtension);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWebPluginFactory(void *, const sipTypeDef *);}
static void *cast_QWebPluginFactory(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWebPluginFactory *sipCpp = reinterpret_cast< ::QWebPluginFactory *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebPluginFactory(void *, int);}
static void release_QWebPluginFactory(void *sipCppV, int)
{
     ::QWebPluginFactory *sipCpp = reinterpret_cast< ::QWebPluginFactory *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebPluginFactory(sipSimpleWrapper *);}
static void dealloc_QWebPluginFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQWebPluginFactory *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWebPluginFactory(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QWebPluginFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebPluginFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebPluginFactory *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWebPluginFactory(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebPluginFactory[] = {{5, 0, 1}};


static PyMethodDef methods_QWebPluginFactory[] = {
    {SIP_MLNAME_CAST(sipName_create), meth_QWebPluginFactory_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_create)},
    {SIP_MLNAME_CAST(sipName_extension), (PyCFunction)meth_QWebPluginFactory_extension, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPluginFactory_extension)},
    {SIP_MLNAME_CAST(sipName_plugins), meth_QWebPluginFactory_plugins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_plugins)},
    {SIP_MLNAME_CAST(sipName_refreshPlugins), meth_QWebPluginFactory_refreshPlugins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_refreshPlugins)},
    {SIP_MLNAME_CAST(sipName_supportsExtension), meth_QWebPluginFactory_supportsExtension, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_supportsExtension)}
};

PyDoc_STRVAR(doc_QWebPluginFactory, "\1QWebPluginFactory(parent: QObject = None)");


static pyqt4ClassPluginDef plugin_QWebPluginFactory = {
    & ::QWebPluginFactory::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtWebKit_QWebPluginFactory = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebPluginFactory,
        {0},
        &plugin_QWebPluginFactory
    },
    {
        sipNameNr_QWebPluginFactory,
        {0, 0, 1},
        5, methods_QWebPluginFactory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebPluginFactory,
    -1,
    -1,
    supers_QWebPluginFactory,
    0,
    init_type_QWebPluginFactory,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebPluginFactory,
    0,
    0,
    0,
    release_QWebPluginFactory,
    cast_QWebPluginFactory,
    0,
    0,
    0,
    0,
    0,
    0
};
