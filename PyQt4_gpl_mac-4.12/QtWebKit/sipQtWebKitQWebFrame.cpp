/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 68 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebframe.sip"
#include <qwebframe.h>
#line 29 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebelement.sip"
#include <qwebelement.h>
#line 39 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 116 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebelement.sip"
#include <qwebelement.h>
#line 42 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 45 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 51 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebsecurityorigin.sip"
#include <qwebsecurityorigin.h>
#line 54 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 57 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 236 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 60 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 68 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 210 "sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 66 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebframe.sip"
#include <qwebframe.h>
#line 75 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 78 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 81 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 84 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 87 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 90 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 93 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 28 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 96 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 28 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 99 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 28 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 102 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 105 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 108 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 111 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 114 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 117 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 120 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 123 "/Users/saitadikonda/Desktop/TestingFolder/PyQt4_gpl_mac-4.12/QtWebKit/sipQtWebKitQWebFrame.cpp"


PyDoc_STRVAR(doc_QWebFrame_page, "page(self) -> QWebPage");

extern "C" {static PyObject *meth_QWebFrame_page(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_page(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QWebPage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->page();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_page, doc_QWebFrame_page);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_load, "load(self, QUrl)\n"
    "load(self, QNetworkRequest, operation: QNetworkAccessManager.Operation = QNetworkAccessManager.GetOperation, body: Union[QByteArray, bytes, bytearray] = QByteArray())");

extern "C" {static PyObject *meth_QWebFrame_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QWebFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QNetworkRequest* a0;
         ::QNetworkAccessManager::Operation a1 = QNetworkAccessManager::GetOperation;
        const  ::QByteArray& a2def = QByteArray();
        const  ::QByteArray* a2 = &a2def;
        int a2State = 0;
         ::QWebFrame *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
            sipName_body,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EJ1", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QNetworkAccessManager_Operation, &a1, sipType_QByteArray, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a2),sipType_QByteArray,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_load, doc_QWebFrame_load);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_setHtml, "setHtml(self, str, baseUrl: QUrl = QUrl())");

extern "C" {static PyObject *meth_QWebFrame_setHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrl& a1def = QUrl();
        const  ::QUrl* a1 = &a1def;
         ::QWebFrame *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHtml(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_setHtml, doc_QWebFrame_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_setContent, "setContent(self, Union[QByteArray, bytes, bytearray], mimeType: str = '', baseUrl: QUrl = QUrl())");

extern "C" {static PyObject *meth_QWebFrame_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QUrl& a2def = QUrl();
        const  ::QUrl* a2 = &a2def;
         ::QWebFrame *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J9", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContent(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_setContent, doc_QWebFrame_setContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_addToJavaScriptWindowObject, "addToJavaScriptWindowObject(self, str, QObject)");

extern "C" {static PyObject *meth_QWebFrame_addToJavaScriptWindowObject(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_addToJavaScriptWindowObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QString,&a0, &a0State, sipType_QObject, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addToJavaScriptWindowObject(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_addToJavaScriptWindowObject, doc_QWebFrame_addToJavaScriptWindowObject);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_toHtml, "toHtml(self) -> str");

extern "C" {static PyObject *meth_QWebFrame_toHtml(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_toHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toHtml());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_toHtml, doc_QWebFrame_toHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_toPlainText, "toPlainText(self) -> str");

extern "C" {static PyObject *meth_QWebFrame_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toPlainText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_toPlainText, doc_QWebFrame_toPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_renderTreeDump, "renderTreeDump(self) -> str");

extern "C" {static PyObject *meth_QWebFrame_renderTreeDump(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_renderTreeDump(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->renderTreeDump());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_renderTreeDump, doc_QWebFrame_renderTreeDump);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_title, "title(self) -> str");

extern "C" {static PyObject *meth_QWebFrame_title(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->title());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_title, doc_QWebFrame_title);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QWebFrame_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_setUrl, doc_QWebFrame_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QWebFrame_url(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_url, doc_QWebFrame_url);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QWebFrame_icon(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_icon, doc_QWebFrame_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_frameName, "frameName(self) -> str");

extern "C" {static PyObject *meth_QWebFrame_frameName(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_frameName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->frameName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_frameName, doc_QWebFrame_frameName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_parentFrame, "parentFrame(self) -> QWebFrame");

extern "C" {static PyObject *meth_QWebFrame_parentFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_parentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QWebFrame*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parentFrame();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_parentFrame, doc_QWebFrame_parentFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_childFrames, "childFrames(self) -> object");

extern "C" {static PyObject *meth_QWebFrame_childFrames(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_childFrames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
            QList< ::QWebFrame*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QWebFrame*>(sipCpp->childFrames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_childFrames, doc_QWebFrame_childFrames);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_scrollBarPolicy, "scrollBarPolicy(self, Qt.Orientation) -> Qt.ScrollBarPolicy");

extern "C" {static PyObject *meth_QWebFrame_scrollBarPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollBarPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Orientation a0;
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_Qt_Orientation, &a0))
        {
             ::Qt::ScrollBarPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scrollBarPolicy(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_ScrollBarPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_scrollBarPolicy, doc_QWebFrame_scrollBarPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_setScrollBarPolicy, "setScrollBarPolicy(self, Qt.Orientation, Qt.ScrollBarPolicy)");

extern "C" {static PyObject *meth_QWebFrame_setScrollBarPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setScrollBarPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Orientation a0;
         ::Qt::ScrollBarPolicy a1;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_Qt_Orientation, &a0, sipType_Qt_ScrollBarPolicy, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScrollBarPolicy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_setScrollBarPolicy, doc_QWebFrame_setScrollBarPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_setScrollBarValue, "setScrollBarValue(self, Qt.Orientation, int)");

extern "C" {static PyObject *meth_QWebFrame_setScrollBarValue(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setScrollBarValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Orientation a0;
        int a1;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEi", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_Qt_Orientation, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScrollBarValue(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_setScrollBarValue, doc_QWebFrame_setScrollBarValue);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_scrollBarValue, "scrollBarValue(self, Qt.Orientation) -> int");

extern "C" {static PyObject *meth_QWebFrame_scrollBarValue(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollBarValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Orientation a0;
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_Qt_Orientation, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scrollBarValue(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_scrollBarValue, doc_QWebFrame_scrollBarValue);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_scrollBarMinimum, "scrollBarMinimum(self, Qt.Orientation) -> int");

extern "C" {static PyObject *meth_QWebFrame_scrollBarMinimum(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollBarMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Orientation a0;
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_Qt_Orientation, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scrollBarMinimum(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_scrollBarMinimum, doc_QWebFrame_scrollBarMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_scrollBarMaximum, "scrollBarMaximum(self, Qt.Orientation) -> int");

extern "C" {static PyObject *meth_QWebFrame_scrollBarMaximum(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollBarMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Orientation a0;
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_Qt_Orientation, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scrollBarMaximum(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_scrollBarMaximum, doc_QWebFrame_scrollBarMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_render, "render(self, QPainter, QRegion)\n"
    "render(self, QPainter)\n"
    "render(self, QPainter, QWebFrame.RenderLayer, clip: QRegion = QRegion())");

extern "C" {static PyObject *meth_QWebFrame_render(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_render(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPainter* a0;
        const  ::QRegion* a1;
         ::QWebFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QPainter, &a0, sipType_QRegion, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPainter* a0;
         ::QWebFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QPainter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPainter* a0;
         ::QWebFrame::RenderLayer a1;
        const  ::QRegion& a2def = QRegion();
        const  ::QRegion* a2 = &a2def;
         ::QWebFrame *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_clip,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8E|J9", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QPainter, &a0, sipType_QWebFrame_RenderLayer, &a1, sipType_QRegion, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_render, doc_QWebFrame_render);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_setTextSizeMultiplier, "setTextSizeMultiplier(self, float)");

extern "C" {static PyObject *meth_QWebFrame_setTextSizeMultiplier(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setTextSizeMultiplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebFrame, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextSizeMultiplier(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_setTextSizeMultiplier, doc_QWebFrame_setTextSizeMultiplier);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_textSizeMultiplier, "textSizeMultiplier(self) -> float");

extern "C" {static PyObject *meth_QWebFrame_textSizeMultiplier(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_textSizeMultiplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textSizeMultiplier();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_textSizeMultiplier, doc_QWebFrame_textSizeMultiplier);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_pos, "pos(self) -> QPoint");

extern "C" {static PyObject *meth_QWebFrame_pos(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPoint(sipCpp->pos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_pos, doc_QWebFrame_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_geometry, "geometry(self) -> QRect");

extern "C" {static PyObject *meth_QWebFrame_geometry(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->geometry());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_geometry, doc_QWebFrame_geometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_contentsSize, "contentsSize(self) -> QSize");

extern "C" {static PyObject *meth_QWebFrame_contentsSize(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_contentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize(sipCpp->contentsSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_contentsSize, doc_QWebFrame_contentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_hitTestContent, "hitTestContent(self, QPoint) -> QWebHitTestResult");

extern "C" {static PyObject *meth_QWebFrame_hitTestContent(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_hitTestContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QPoint, &a0))
        {
             ::QWebHitTestResult*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QWebHitTestResult(sipCpp->hitTestContent(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWebHitTestResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_hitTestContent, doc_QWebFrame_hitTestContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QWebFrame_event(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWebFrame::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_event, doc_QWebFrame_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_evaluateJavaScript, "evaluateJavaScript(self, str) -> Any");

extern "C" {static PyObject *meth_QWebFrame_evaluateJavaScript(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_evaluateJavaScript(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant(sipCpp->evaluateJavaScript(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_evaluateJavaScript, doc_QWebFrame_evaluateJavaScript);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_print_, "print_(self, QPrinter)");

extern "C" {static PyObject *meth_QWebFrame_print_(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPrinter* a0;
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QPrinter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_print_, doc_QWebFrame_print_);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_metaData, "metaData(self) -> object");

extern "C" {static PyObject *meth_QWebFrame_metaData(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
            QMultiMap< ::QString, ::QString>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMultiMap< ::QString, ::QString>(sipCpp->metaData());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMultiMap_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_metaData, doc_QWebFrame_metaData);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_scroll, "scroll(self, int, int)");

extern "C" {static PyObject *meth_QWebFrame_scroll(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWebFrame, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scroll(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_scroll, doc_QWebFrame_scroll);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_scrollPosition, "scrollPosition(self) -> QPoint");

extern "C" {static PyObject *meth_QWebFrame_scrollPosition(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPoint(sipCpp->scrollPosition());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_scrollPosition, doc_QWebFrame_scrollPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_setScrollPosition, "setScrollPosition(self, QPoint)");

extern "C" {static PyObject *meth_QWebFrame_setScrollPosition(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setScrollPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScrollPosition(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_setScrollPosition, doc_QWebFrame_setScrollPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_zoomFactor, "zoomFactor(self) -> float");

extern "C" {static PyObject *meth_QWebFrame_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->zoomFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_zoomFactor, doc_QWebFrame_zoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_setZoomFactor, "setZoomFactor(self, float)");

extern "C" {static PyObject *meth_QWebFrame_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebFrame, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setZoomFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_setZoomFactor, doc_QWebFrame_setZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_securityOrigin, "securityOrigin(self) -> QWebSecurityOrigin");

extern "C" {static PyObject *meth_QWebFrame_securityOrigin(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_securityOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QWebSecurityOrigin*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QWebSecurityOrigin(sipCpp->securityOrigin());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWebSecurityOrigin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_securityOrigin, doc_QWebFrame_securityOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_requestedUrl, "requestedUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebFrame_requestedUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_requestedUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->requestedUrl());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_requestedUrl, doc_QWebFrame_requestedUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_baseUrl, "baseUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebFrame_baseUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_baseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->baseUrl());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_baseUrl, doc_QWebFrame_baseUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_scrollBarGeometry, "scrollBarGeometry(self, Qt.Orientation) -> QRect");

extern "C" {static PyObject *meth_QWebFrame_scrollBarGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollBarGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Orientation a0;
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_Qt_Orientation, &a0))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->scrollBarGeometry(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_scrollBarGeometry, doc_QWebFrame_scrollBarGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_hasFocus, "hasFocus(self) -> bool");

extern "C" {static PyObject *meth_QWebFrame_hasFocus(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_hasFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFocus();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_hasFocus, doc_QWebFrame_hasFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_setFocus, "setFocus(self)");

extern "C" {static PyObject *meth_QWebFrame_setFocus(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_setFocus, doc_QWebFrame_setFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_documentElement, "documentElement(self) -> QWebElement");

extern "C" {static PyObject *meth_QWebFrame_documentElement(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_documentElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebFrame, &sipCpp))
        {
             ::QWebElement*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QWebElement(sipCpp->documentElement());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_documentElement, doc_QWebFrame_documentElement);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_findAllElements, "findAllElements(self, str) -> QWebElementCollection");

extern "C" {static PyObject *meth_QWebFrame_findAllElements(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_findAllElements(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QWebElementCollection*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QWebElementCollection(sipCpp->findAllElements(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QWebElementCollection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_findAllElements, doc_QWebFrame_findAllElements);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_findFirstElement, "findFirstElement(self, str) -> QWebElement");

extern "C" {static PyObject *meth_QWebFrame_findFirstElement(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_findFirstElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QWebElement*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QWebElement(sipCpp->findFirstElement(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_findFirstElement, doc_QWebFrame_findFirstElement);

    return NULL;
}


PyDoc_STRVAR(doc_QWebFrame_scrollToAnchor, "scrollToAnchor(self, str)");

extern "C" {static PyObject *meth_QWebFrame_scrollToAnchor(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollToAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWebFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebFrame, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollToAnchor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebFrame, sipName_scrollToAnchor, doc_QWebFrame_scrollToAnchor);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWebFrame(void *, const sipTypeDef *);}
static void *cast_QWebFrame(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWebFrame *sipCpp = reinterpret_cast< ::QWebFrame *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebFrame(void *, int);}
static void release_QWebFrame(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebFrame[] = {{5, 0, 1}};


static PyMethodDef methods_QWebFrame[] = {
    {SIP_MLNAME_CAST(sipName_addToJavaScriptWindowObject), meth_QWebFrame_addToJavaScriptWindowObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_addToJavaScriptWindowObject)},
    {SIP_MLNAME_CAST(sipName_baseUrl), meth_QWebFrame_baseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_baseUrl)},
    {SIP_MLNAME_CAST(sipName_childFrames), meth_QWebFrame_childFrames, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_childFrames)},
    {SIP_MLNAME_CAST(sipName_contentsSize), meth_QWebFrame_contentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_contentsSize)},
    {SIP_MLNAME_CAST(sipName_documentElement), meth_QWebFrame_documentElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_documentElement)},
    {SIP_MLNAME_CAST(sipName_evaluateJavaScript), meth_QWebFrame_evaluateJavaScript, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_evaluateJavaScript)},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebFrame_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_event)},
    {SIP_MLNAME_CAST(sipName_findAllElements), meth_QWebFrame_findAllElements, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_findAllElements)},
    {SIP_MLNAME_CAST(sipName_findFirstElement), meth_QWebFrame_findFirstElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_findFirstElement)},
    {SIP_MLNAME_CAST(sipName_frameName), meth_QWebFrame_frameName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_frameName)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QWebFrame_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_geometry)},
    {SIP_MLNAME_CAST(sipName_hasFocus), meth_QWebFrame_hasFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_hasFocus)},
    {SIP_MLNAME_CAST(sipName_hitTestContent), meth_QWebFrame_hitTestContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_hitTestContent)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWebFrame_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_icon)},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QWebFrame_load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebFrame_load)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QWebFrame_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_metaData)},
    {SIP_MLNAME_CAST(sipName_page), meth_QWebFrame_page, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_page)},
    {SIP_MLNAME_CAST(sipName_parentFrame), meth_QWebFrame_parentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_parentFrame)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QWebFrame_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_pos)},
    {SIP_MLNAME_CAST(sipName_print_), meth_QWebFrame_print_, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_print_)},
    {SIP_MLNAME_CAST(sipName_render), (PyCFunction)meth_QWebFrame_render, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebFrame_render)},
    {SIP_MLNAME_CAST(sipName_renderTreeDump), meth_QWebFrame_renderTreeDump, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_renderTreeDump)},
    {SIP_MLNAME_CAST(sipName_requestedUrl), meth_QWebFrame_requestedUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_requestedUrl)},
    {SIP_MLNAME_CAST(sipName_scroll), meth_QWebFrame_scroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_scroll)},
    {SIP_MLNAME_CAST(sipName_scrollBarGeometry), meth_QWebFrame_scrollBarGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_scrollBarGeometry)},
    {SIP_MLNAME_CAST(sipName_scrollBarMaximum), meth_QWebFrame_scrollBarMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_scrollBarMaximum)},
    {SIP_MLNAME_CAST(sipName_scrollBarMinimum), meth_QWebFrame_scrollBarMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_scrollBarMinimum)},
    {SIP_MLNAME_CAST(sipName_scrollBarPolicy), meth_QWebFrame_scrollBarPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_scrollBarPolicy)},
    {SIP_MLNAME_CAST(sipName_scrollBarValue), meth_QWebFrame_scrollBarValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_scrollBarValue)},
    {SIP_MLNAME_CAST(sipName_scrollPosition), meth_QWebFrame_scrollPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_scrollPosition)},
    {SIP_MLNAME_CAST(sipName_scrollToAnchor), meth_QWebFrame_scrollToAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_scrollToAnchor)},
    {SIP_MLNAME_CAST(sipName_securityOrigin), meth_QWebFrame_securityOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_securityOrigin)},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QWebFrame_setContent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebFrame_setContent)},
    {SIP_MLNAME_CAST(sipName_setFocus), meth_QWebFrame_setFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_setFocus)},
    {SIP_MLNAME_CAST(sipName_setHtml), (PyCFunction)meth_QWebFrame_setHtml, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebFrame_setHtml)},
    {SIP_MLNAME_CAST(sipName_setScrollBarPolicy), meth_QWebFrame_setScrollBarPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_setScrollBarPolicy)},
    {SIP_MLNAME_CAST(sipName_setScrollBarValue), meth_QWebFrame_setScrollBarValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_setScrollBarValue)},
    {SIP_MLNAME_CAST(sipName_setScrollPosition), meth_QWebFrame_setScrollPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_setScrollPosition)},
    {SIP_MLNAME_CAST(sipName_setTextSizeMultiplier), meth_QWebFrame_setTextSizeMultiplier, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_setTextSizeMultiplier)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QWebFrame_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_setUrl)},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QWebFrame_setZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_setZoomFactor)},
    {SIP_MLNAME_CAST(sipName_textSizeMultiplier), meth_QWebFrame_textSizeMultiplier, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_textSizeMultiplier)},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebFrame_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_title)},
    {SIP_MLNAME_CAST(sipName_toHtml), meth_QWebFrame_toHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_toHtml)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QWebFrame_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_toPlainText)},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebFrame_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_url)},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QWebFrame_zoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebFrame_zoomFactor)}
};

static sipEnumMemberDef enummembers_QWebFrame[] = {
    {sipName_AllLayers, static_cast<int>( ::QWebFrame::AllLayers), 14},
    {sipName_ContentsLayer, static_cast<int>( ::QWebFrame::ContentsLayer), 14},
    {sipName_PanIconLayer, static_cast<int>( ::QWebFrame::PanIconLayer), 14},
    {sipName_ScrollBarLayer, static_cast<int>( ::QWebFrame::ScrollBarLayer), 14},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QWebFrame[] = {
    {"pageChanged()", "\1pageChanged(self)", 0, 0},
    {"loadFinished(bool)", "\1loadFinished(self, bool)", 0, 0},
    {"loadStarted()", "\1loadStarted(self)", 0, 0},
    {"contentsSizeChanged(QSize)", "\1contentsSizeChanged(self, QSize)", 0, 0},
    {"iconChanged()", "\1iconChanged(self)", 0, 0},
    {"initialLayoutCompleted()", "\1initialLayoutCompleted(self)", 0, 0},
    {"urlChanged(QUrl)", "\1urlChanged(self, QUrl)", 0, 0},
    {"titleChanged(QString)", "\1titleChanged(self, str)", 0, 0},
    {"javaScriptWindowObjectCleared()", "\1javaScriptWindowObjectCleared(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QWebFrame = {
    & ::QWebFrame::staticMetaObject,
    0,
    signals_QWebFrame
};


sipClassTypeDef sipTypeDef_QtWebKit_QWebFrame = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebFrame,
        {0},
        &plugin_QWebFrame
    },
    {
        sipNameNr_QWebFrame,
        {0, 0, 1},
        47, methods_QWebFrame,
        4, enummembers_QWebFrame,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QWebFrame,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QWebFrame,
    cast_QWebFrame,
    0,
    0,
    0,
    0,
    0,
    0
};
